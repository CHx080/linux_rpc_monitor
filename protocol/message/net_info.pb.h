// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_5finfo_2eproto;
namespace Monitor {
class NetInfo;
struct NetInfoDefaultTypeInternal;
extern NetInfoDefaultTypeInternal _NetInfo_default_instance_;
class NetStat;
struct NetStatDefaultTypeInternal;
extern NetStatDefaultTypeInternal _NetStat_default_instance_;
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::Monitor::NetInfo* Arena::CreateMaybeMessage<::Monitor::NetInfo>(Arena*);
template<> ::Monitor::NetStat* Arena::CreateMaybeMessage<::Monitor::NetStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Monitor {

// ===================================================================

class NetStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Monitor.NetStat) */ {
 public:
  inline NetStat() : NetStat(nullptr) {}
  ~NetStat() override;
  explicit PROTOBUF_CONSTEXPR NetStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetStat(const NetStat& from);
  NetStat(NetStat&& from) noexcept
    : NetStat() {
    *this = ::std::move(from);
  }

  inline NetStat& operator=(const NetStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetStat& operator=(NetStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetStat* internal_default_instance() {
    return reinterpret_cast<const NetStat*>(
               &_NetStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetStat& a, NetStat& b) {
    a.Swap(&b);
  }
  inline void Swap(NetStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetStat& from) {
    NetStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Monitor.NetStat";
  }
  protected:
  explicit NetStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRxBytesFieldNumber = 1,
    kRxPacketsFieldNumber = 2,
    kRxErrorsFieldNumber = 3,
    kRxDropsFieldNumber = 4,
    kRxFifoFieldNumber = 5,
    kRxFrameFieldNumber = 6,
    kRxCompressedFieldNumber = 7,
    kRxMulticastFieldNumber = 8,
    kTxBytesFieldNumber = 9,
    kTxPacketsFieldNumber = 10,
    kTxErrorsFieldNumber = 11,
    kTxDropsFieldNumber = 12,
    kTxFifoFieldNumber = 13,
    kTxCollsFieldNumber = 14,
    kTxCarrierFieldNumber = 15,
    kTxCompressedFieldNumber = 16,
  };
  // uint64 rx_bytes = 1;
  void clear_rx_bytes();
  uint64_t rx_bytes() const;
  void set_rx_bytes(uint64_t value);
  private:
  uint64_t _internal_rx_bytes() const;
  void _internal_set_rx_bytes(uint64_t value);
  public:

  // uint64 rx_packets = 2;
  void clear_rx_packets();
  uint64_t rx_packets() const;
  void set_rx_packets(uint64_t value);
  private:
  uint64_t _internal_rx_packets() const;
  void _internal_set_rx_packets(uint64_t value);
  public:

  // uint64 rx_errors = 3;
  void clear_rx_errors();
  uint64_t rx_errors() const;
  void set_rx_errors(uint64_t value);
  private:
  uint64_t _internal_rx_errors() const;
  void _internal_set_rx_errors(uint64_t value);
  public:

  // uint64 rx_drops = 4;
  void clear_rx_drops();
  uint64_t rx_drops() const;
  void set_rx_drops(uint64_t value);
  private:
  uint64_t _internal_rx_drops() const;
  void _internal_set_rx_drops(uint64_t value);
  public:

  // uint64 rx_fifo = 5;
  void clear_rx_fifo();
  uint64_t rx_fifo() const;
  void set_rx_fifo(uint64_t value);
  private:
  uint64_t _internal_rx_fifo() const;
  void _internal_set_rx_fifo(uint64_t value);
  public:

  // uint64 rx_frame = 6;
  void clear_rx_frame();
  uint64_t rx_frame() const;
  void set_rx_frame(uint64_t value);
  private:
  uint64_t _internal_rx_frame() const;
  void _internal_set_rx_frame(uint64_t value);
  public:

  // uint64 rx_compressed = 7;
  void clear_rx_compressed();
  uint64_t rx_compressed() const;
  void set_rx_compressed(uint64_t value);
  private:
  uint64_t _internal_rx_compressed() const;
  void _internal_set_rx_compressed(uint64_t value);
  public:

  // uint64 rx_multicast = 8;
  void clear_rx_multicast();
  uint64_t rx_multicast() const;
  void set_rx_multicast(uint64_t value);
  private:
  uint64_t _internal_rx_multicast() const;
  void _internal_set_rx_multicast(uint64_t value);
  public:

  // uint64 tx_bytes = 9;
  void clear_tx_bytes();
  uint64_t tx_bytes() const;
  void set_tx_bytes(uint64_t value);
  private:
  uint64_t _internal_tx_bytes() const;
  void _internal_set_tx_bytes(uint64_t value);
  public:

  // uint64 tx_packets = 10;
  void clear_tx_packets();
  uint64_t tx_packets() const;
  void set_tx_packets(uint64_t value);
  private:
  uint64_t _internal_tx_packets() const;
  void _internal_set_tx_packets(uint64_t value);
  public:

  // uint64 tx_errors = 11;
  void clear_tx_errors();
  uint64_t tx_errors() const;
  void set_tx_errors(uint64_t value);
  private:
  uint64_t _internal_tx_errors() const;
  void _internal_set_tx_errors(uint64_t value);
  public:

  // uint64 tx_drops = 12;
  void clear_tx_drops();
  uint64_t tx_drops() const;
  void set_tx_drops(uint64_t value);
  private:
  uint64_t _internal_tx_drops() const;
  void _internal_set_tx_drops(uint64_t value);
  public:

  // uint64 tx_fifo = 13;
  void clear_tx_fifo();
  uint64_t tx_fifo() const;
  void set_tx_fifo(uint64_t value);
  private:
  uint64_t _internal_tx_fifo() const;
  void _internal_set_tx_fifo(uint64_t value);
  public:

  // uint64 tx_colls = 14;
  void clear_tx_colls();
  uint64_t tx_colls() const;
  void set_tx_colls(uint64_t value);
  private:
  uint64_t _internal_tx_colls() const;
  void _internal_set_tx_colls(uint64_t value);
  public:

  // uint64 tx_carrier = 15;
  void clear_tx_carrier();
  uint64_t tx_carrier() const;
  void set_tx_carrier(uint64_t value);
  private:
  uint64_t _internal_tx_carrier() const;
  void _internal_set_tx_carrier(uint64_t value);
  public:

  // uint64 tx_compressed = 16;
  void clear_tx_compressed();
  uint64_t tx_compressed() const;
  void set_tx_compressed(uint64_t value);
  private:
  uint64_t _internal_tx_compressed() const;
  void _internal_set_tx_compressed(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Monitor.NetStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t rx_bytes_;
    uint64_t rx_packets_;
    uint64_t rx_errors_;
    uint64_t rx_drops_;
    uint64_t rx_fifo_;
    uint64_t rx_frame_;
    uint64_t rx_compressed_;
    uint64_t rx_multicast_;
    uint64_t tx_bytes_;
    uint64_t tx_packets_;
    uint64_t tx_errors_;
    uint64_t tx_drops_;
    uint64_t tx_fifo_;
    uint64_t tx_colls_;
    uint64_t tx_carrier_;
    uint64_t tx_compressed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_5finfo_2eproto;
};
// -------------------------------------------------------------------

class NetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Monitor.NetInfo) */ {
 public:
  inline NetInfo() : NetInfo(nullptr) {}
  ~NetInfo() override;
  explicit PROTOBUF_CONSTEXPR NetInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInfo(const NetInfo& from);
  NetInfo(NetInfo&& from) noexcept
    : NetInfo() {
    *this = ::std::move(from);
  }

  inline NetInfo& operator=(const NetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfo& operator=(NetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInfo* internal_default_instance() {
    return reinterpret_cast<const NetInfo*>(
               &_NetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetInfo& a, NetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetInfo& from) {
    NetInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Monitor.NetInfo";
  }
  protected:
  explicit NetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetNameFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // string net_name = 1;
  void clear_net_name();
  const std::string& net_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_net_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_net_name();
  PROTOBUF_NODISCARD std::string* release_net_name();
  void set_allocated_net_name(std::string* net_name);
  private:
  const std::string& _internal_net_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_net_name(const std::string& value);
  std::string* _internal_mutable_net_name();
  public:

  // .Monitor.NetStat info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Monitor::NetStat& info() const;
  PROTOBUF_NODISCARD ::Monitor::NetStat* release_info();
  ::Monitor::NetStat* mutable_info();
  void set_allocated_info(::Monitor::NetStat* info);
  private:
  const ::Monitor::NetStat& _internal_info() const;
  ::Monitor::NetStat* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Monitor::NetStat* info);
  ::Monitor::NetStat* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Monitor.NetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_name_;
    ::Monitor::NetStat* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetStat

// uint64 rx_bytes = 1;
inline void NetStat::clear_rx_bytes() {
  _impl_.rx_bytes_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_rx_bytes() const {
  return _impl_.rx_bytes_;
}
inline uint64_t NetStat::rx_bytes() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.rx_bytes)
  return _internal_rx_bytes();
}
inline void NetStat::_internal_set_rx_bytes(uint64_t value) {
  
  _impl_.rx_bytes_ = value;
}
inline void NetStat::set_rx_bytes(uint64_t value) {
  _internal_set_rx_bytes(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.rx_bytes)
}

// uint64 rx_packets = 2;
inline void NetStat::clear_rx_packets() {
  _impl_.rx_packets_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_rx_packets() const {
  return _impl_.rx_packets_;
}
inline uint64_t NetStat::rx_packets() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.rx_packets)
  return _internal_rx_packets();
}
inline void NetStat::_internal_set_rx_packets(uint64_t value) {
  
  _impl_.rx_packets_ = value;
}
inline void NetStat::set_rx_packets(uint64_t value) {
  _internal_set_rx_packets(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.rx_packets)
}

// uint64 rx_errors = 3;
inline void NetStat::clear_rx_errors() {
  _impl_.rx_errors_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_rx_errors() const {
  return _impl_.rx_errors_;
}
inline uint64_t NetStat::rx_errors() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.rx_errors)
  return _internal_rx_errors();
}
inline void NetStat::_internal_set_rx_errors(uint64_t value) {
  
  _impl_.rx_errors_ = value;
}
inline void NetStat::set_rx_errors(uint64_t value) {
  _internal_set_rx_errors(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.rx_errors)
}

// uint64 rx_drops = 4;
inline void NetStat::clear_rx_drops() {
  _impl_.rx_drops_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_rx_drops() const {
  return _impl_.rx_drops_;
}
inline uint64_t NetStat::rx_drops() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.rx_drops)
  return _internal_rx_drops();
}
inline void NetStat::_internal_set_rx_drops(uint64_t value) {
  
  _impl_.rx_drops_ = value;
}
inline void NetStat::set_rx_drops(uint64_t value) {
  _internal_set_rx_drops(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.rx_drops)
}

// uint64 rx_fifo = 5;
inline void NetStat::clear_rx_fifo() {
  _impl_.rx_fifo_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_rx_fifo() const {
  return _impl_.rx_fifo_;
}
inline uint64_t NetStat::rx_fifo() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.rx_fifo)
  return _internal_rx_fifo();
}
inline void NetStat::_internal_set_rx_fifo(uint64_t value) {
  
  _impl_.rx_fifo_ = value;
}
inline void NetStat::set_rx_fifo(uint64_t value) {
  _internal_set_rx_fifo(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.rx_fifo)
}

// uint64 rx_frame = 6;
inline void NetStat::clear_rx_frame() {
  _impl_.rx_frame_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_rx_frame() const {
  return _impl_.rx_frame_;
}
inline uint64_t NetStat::rx_frame() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.rx_frame)
  return _internal_rx_frame();
}
inline void NetStat::_internal_set_rx_frame(uint64_t value) {
  
  _impl_.rx_frame_ = value;
}
inline void NetStat::set_rx_frame(uint64_t value) {
  _internal_set_rx_frame(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.rx_frame)
}

// uint64 rx_compressed = 7;
inline void NetStat::clear_rx_compressed() {
  _impl_.rx_compressed_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_rx_compressed() const {
  return _impl_.rx_compressed_;
}
inline uint64_t NetStat::rx_compressed() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.rx_compressed)
  return _internal_rx_compressed();
}
inline void NetStat::_internal_set_rx_compressed(uint64_t value) {
  
  _impl_.rx_compressed_ = value;
}
inline void NetStat::set_rx_compressed(uint64_t value) {
  _internal_set_rx_compressed(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.rx_compressed)
}

// uint64 rx_multicast = 8;
inline void NetStat::clear_rx_multicast() {
  _impl_.rx_multicast_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_rx_multicast() const {
  return _impl_.rx_multicast_;
}
inline uint64_t NetStat::rx_multicast() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.rx_multicast)
  return _internal_rx_multicast();
}
inline void NetStat::_internal_set_rx_multicast(uint64_t value) {
  
  _impl_.rx_multicast_ = value;
}
inline void NetStat::set_rx_multicast(uint64_t value) {
  _internal_set_rx_multicast(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.rx_multicast)
}

// uint64 tx_bytes = 9;
inline void NetStat::clear_tx_bytes() {
  _impl_.tx_bytes_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_tx_bytes() const {
  return _impl_.tx_bytes_;
}
inline uint64_t NetStat::tx_bytes() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.tx_bytes)
  return _internal_tx_bytes();
}
inline void NetStat::_internal_set_tx_bytes(uint64_t value) {
  
  _impl_.tx_bytes_ = value;
}
inline void NetStat::set_tx_bytes(uint64_t value) {
  _internal_set_tx_bytes(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.tx_bytes)
}

// uint64 tx_packets = 10;
inline void NetStat::clear_tx_packets() {
  _impl_.tx_packets_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_tx_packets() const {
  return _impl_.tx_packets_;
}
inline uint64_t NetStat::tx_packets() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.tx_packets)
  return _internal_tx_packets();
}
inline void NetStat::_internal_set_tx_packets(uint64_t value) {
  
  _impl_.tx_packets_ = value;
}
inline void NetStat::set_tx_packets(uint64_t value) {
  _internal_set_tx_packets(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.tx_packets)
}

// uint64 tx_errors = 11;
inline void NetStat::clear_tx_errors() {
  _impl_.tx_errors_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_tx_errors() const {
  return _impl_.tx_errors_;
}
inline uint64_t NetStat::tx_errors() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.tx_errors)
  return _internal_tx_errors();
}
inline void NetStat::_internal_set_tx_errors(uint64_t value) {
  
  _impl_.tx_errors_ = value;
}
inline void NetStat::set_tx_errors(uint64_t value) {
  _internal_set_tx_errors(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.tx_errors)
}

// uint64 tx_drops = 12;
inline void NetStat::clear_tx_drops() {
  _impl_.tx_drops_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_tx_drops() const {
  return _impl_.tx_drops_;
}
inline uint64_t NetStat::tx_drops() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.tx_drops)
  return _internal_tx_drops();
}
inline void NetStat::_internal_set_tx_drops(uint64_t value) {
  
  _impl_.tx_drops_ = value;
}
inline void NetStat::set_tx_drops(uint64_t value) {
  _internal_set_tx_drops(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.tx_drops)
}

// uint64 tx_fifo = 13;
inline void NetStat::clear_tx_fifo() {
  _impl_.tx_fifo_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_tx_fifo() const {
  return _impl_.tx_fifo_;
}
inline uint64_t NetStat::tx_fifo() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.tx_fifo)
  return _internal_tx_fifo();
}
inline void NetStat::_internal_set_tx_fifo(uint64_t value) {
  
  _impl_.tx_fifo_ = value;
}
inline void NetStat::set_tx_fifo(uint64_t value) {
  _internal_set_tx_fifo(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.tx_fifo)
}

// uint64 tx_colls = 14;
inline void NetStat::clear_tx_colls() {
  _impl_.tx_colls_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_tx_colls() const {
  return _impl_.tx_colls_;
}
inline uint64_t NetStat::tx_colls() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.tx_colls)
  return _internal_tx_colls();
}
inline void NetStat::_internal_set_tx_colls(uint64_t value) {
  
  _impl_.tx_colls_ = value;
}
inline void NetStat::set_tx_colls(uint64_t value) {
  _internal_set_tx_colls(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.tx_colls)
}

// uint64 tx_carrier = 15;
inline void NetStat::clear_tx_carrier() {
  _impl_.tx_carrier_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_tx_carrier() const {
  return _impl_.tx_carrier_;
}
inline uint64_t NetStat::tx_carrier() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.tx_carrier)
  return _internal_tx_carrier();
}
inline void NetStat::_internal_set_tx_carrier(uint64_t value) {
  
  _impl_.tx_carrier_ = value;
}
inline void NetStat::set_tx_carrier(uint64_t value) {
  _internal_set_tx_carrier(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.tx_carrier)
}

// uint64 tx_compressed = 16;
inline void NetStat::clear_tx_compressed() {
  _impl_.tx_compressed_ = uint64_t{0u};
}
inline uint64_t NetStat::_internal_tx_compressed() const {
  return _impl_.tx_compressed_;
}
inline uint64_t NetStat::tx_compressed() const {
  // @@protoc_insertion_point(field_get:Monitor.NetStat.tx_compressed)
  return _internal_tx_compressed();
}
inline void NetStat::_internal_set_tx_compressed(uint64_t value) {
  
  _impl_.tx_compressed_ = value;
}
inline void NetStat::set_tx_compressed(uint64_t value) {
  _internal_set_tx_compressed(value);
  // @@protoc_insertion_point(field_set:Monitor.NetStat.tx_compressed)
}

// -------------------------------------------------------------------

// NetInfo

// string net_name = 1;
inline void NetInfo::clear_net_name() {
  _impl_.net_name_.ClearToEmpty();
}
inline const std::string& NetInfo::net_name() const {
  // @@protoc_insertion_point(field_get:Monitor.NetInfo.net_name)
  return _internal_net_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInfo::set_net_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.net_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Monitor.NetInfo.net_name)
}
inline std::string* NetInfo::mutable_net_name() {
  std::string* _s = _internal_mutable_net_name();
  // @@protoc_insertion_point(field_mutable:Monitor.NetInfo.net_name)
  return _s;
}
inline const std::string& NetInfo::_internal_net_name() const {
  return _impl_.net_name_.Get();
}
inline void NetInfo::_internal_set_net_name(const std::string& value) {
  
  _impl_.net_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetInfo::_internal_mutable_net_name() {
  
  return _impl_.net_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetInfo::release_net_name() {
  // @@protoc_insertion_point(field_release:Monitor.NetInfo.net_name)
  return _impl_.net_name_.Release();
}
inline void NetInfo::set_allocated_net_name(std::string* net_name) {
  if (net_name != nullptr) {
    
  } else {
    
  }
  _impl_.net_name_.SetAllocated(net_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.net_name_.IsDefault()) {
    _impl_.net_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Monitor.NetInfo.net_name)
}

// .Monitor.NetStat info = 2;
inline bool NetInfo::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool NetInfo::has_info() const {
  return _internal_has_info();
}
inline void NetInfo::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Monitor::NetStat& NetInfo::_internal_info() const {
  const ::Monitor::NetStat* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Monitor::NetStat&>(
      ::Monitor::_NetStat_default_instance_);
}
inline const ::Monitor::NetStat& NetInfo::info() const {
  // @@protoc_insertion_point(field_get:Monitor.NetInfo.info)
  return _internal_info();
}
inline void NetInfo::unsafe_arena_set_allocated_info(
    ::Monitor::NetStat* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Monitor.NetInfo.info)
}
inline ::Monitor::NetStat* NetInfo::release_info() {
  
  ::Monitor::NetStat* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Monitor::NetStat* NetInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Monitor.NetInfo.info)
  
  ::Monitor::NetStat* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Monitor::NetStat* NetInfo::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Monitor::NetStat>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Monitor::NetStat* NetInfo::mutable_info() {
  ::Monitor::NetStat* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Monitor.NetInfo.info)
  return _msg;
}
inline void NetInfo::set_allocated_info(::Monitor::NetStat* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Monitor.NetInfo.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_5finfo_2eproto
