// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_info.proto

#include "net_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Monitor {
PROTOBUF_CONSTEXPR NetStat::NetStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rx_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_packets_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_errors_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_drops_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_fifo_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_frame_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_compressed_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_multicast_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_packets_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_errors_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_drops_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_fifo_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_colls_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_carrier_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_compressed_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetStatDefaultTypeInternal() {}
  union {
    NetStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetStatDefaultTypeInternal _NetStat_default_instance_;
PROTOBUF_CONSTEXPR NetInfo::NetInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.net_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInfoDefaultTypeInternal() {}
  union {
    NetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInfoDefaultTypeInternal _NetInfo_default_instance_;
}  // namespace Monitor
static ::_pb::Metadata file_level_metadata_net_5finfo_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_net_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_net_5finfo_2eproto = nullptr;

const uint32_t TableStruct_net_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.rx_bytes_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.rx_packets_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.rx_errors_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.rx_drops_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.rx_fifo_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.rx_frame_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.rx_compressed_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.rx_multicast_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.tx_bytes_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.tx_packets_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.tx_errors_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.tx_drops_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.tx_fifo_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.tx_colls_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.tx_carrier_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetStat, _impl_.tx_compressed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Monitor::NetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Monitor::NetInfo, _impl_.net_name_),
  PROTOBUF_FIELD_OFFSET(::Monitor::NetInfo, _impl_.info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Monitor::NetStat)},
  { 22, -1, -1, sizeof(::Monitor::NetInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Monitor::_NetStat_default_instance_._instance,
  &::Monitor::_NetInfo_default_instance_._instance,
};

const char descriptor_table_protodef_net_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016net_info.proto\022\007Monitor\"\275\002\n\007NetStat\022\020\n"
  "\010rx_bytes\030\001 \001(\004\022\022\n\nrx_packets\030\002 \001(\004\022\021\n\tr"
  "x_errors\030\003 \001(\004\022\020\n\010rx_drops\030\004 \001(\004\022\017\n\007rx_f"
  "ifo\030\005 \001(\004\022\020\n\010rx_frame\030\006 \001(\004\022\025\n\rrx_compre"
  "ssed\030\007 \001(\004\022\024\n\014rx_multicast\030\010 \001(\004\022\020\n\010tx_b"
  "ytes\030\t \001(\004\022\022\n\ntx_packets\030\n \001(\004\022\021\n\ttx_err"
  "ors\030\013 \001(\004\022\020\n\010tx_drops\030\014 \001(\004\022\017\n\007tx_fifo\030\r"
  " \001(\004\022\020\n\010tx_colls\030\016 \001(\004\022\022\n\ntx_carrier\030\017 \001"
  "(\004\022\025\n\rtx_compressed\030\020 \001(\004\";\n\007NetInfo\022\020\n\010"
  "net_name\030\001 \001(\t\022\036\n\004info\030\002 \001(\0132\020.Monitor.N"
  "etStatb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_net_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_5finfo_2eproto = {
    false, false, 414, descriptor_table_protodef_net_5finfo_2eproto,
    "net_info.proto",
    &descriptor_table_net_5finfo_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_net_5finfo_2eproto::offsets,
    file_level_metadata_net_5finfo_2eproto, file_level_enum_descriptors_net_5finfo_2eproto,
    file_level_service_descriptors_net_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_5finfo_2eproto_getter() {
  return &descriptor_table_net_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_5finfo_2eproto(&descriptor_table_net_5finfo_2eproto);
namespace Monitor {

// ===================================================================

class NetStat::_Internal {
 public:
};

NetStat::NetStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Monitor.NetStat)
}
NetStat::NetStat(const NetStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rx_bytes_){}
    , decltype(_impl_.rx_packets_){}
    , decltype(_impl_.rx_errors_){}
    , decltype(_impl_.rx_drops_){}
    , decltype(_impl_.rx_fifo_){}
    , decltype(_impl_.rx_frame_){}
    , decltype(_impl_.rx_compressed_){}
    , decltype(_impl_.rx_multicast_){}
    , decltype(_impl_.tx_bytes_){}
    , decltype(_impl_.tx_packets_){}
    , decltype(_impl_.tx_errors_){}
    , decltype(_impl_.tx_drops_){}
    , decltype(_impl_.tx_fifo_){}
    , decltype(_impl_.tx_colls_){}
    , decltype(_impl_.tx_carrier_){}
    , decltype(_impl_.tx_compressed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rx_bytes_, &from._impl_.rx_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tx_compressed_) -
    reinterpret_cast<char*>(&_impl_.rx_bytes_)) + sizeof(_impl_.tx_compressed_));
  // @@protoc_insertion_point(copy_constructor:Monitor.NetStat)
}

inline void NetStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rx_bytes_){uint64_t{0u}}
    , decltype(_impl_.rx_packets_){uint64_t{0u}}
    , decltype(_impl_.rx_errors_){uint64_t{0u}}
    , decltype(_impl_.rx_drops_){uint64_t{0u}}
    , decltype(_impl_.rx_fifo_){uint64_t{0u}}
    , decltype(_impl_.rx_frame_){uint64_t{0u}}
    , decltype(_impl_.rx_compressed_){uint64_t{0u}}
    , decltype(_impl_.rx_multicast_){uint64_t{0u}}
    , decltype(_impl_.tx_bytes_){uint64_t{0u}}
    , decltype(_impl_.tx_packets_){uint64_t{0u}}
    , decltype(_impl_.tx_errors_){uint64_t{0u}}
    , decltype(_impl_.tx_drops_){uint64_t{0u}}
    , decltype(_impl_.tx_fifo_){uint64_t{0u}}
    , decltype(_impl_.tx_colls_){uint64_t{0u}}
    , decltype(_impl_.tx_carrier_){uint64_t{0u}}
    , decltype(_impl_.tx_compressed_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetStat::~NetStat() {
  // @@protoc_insertion_point(destructor:Monitor.NetStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetStat::Clear() {
// @@protoc_insertion_point(message_clear_start:Monitor.NetStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rx_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tx_compressed_) -
      reinterpret_cast<char*>(&_impl_.rx_bytes_)) + sizeof(_impl_.tx_compressed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 rx_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rx_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rx_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_drops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rx_drops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_fifo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rx_fifo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_frame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rx_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_compressed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.rx_compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_multicast = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.rx_multicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.tx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_packets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.tx_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_errors = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.tx_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_drops = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.tx_drops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_fifo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.tx_fifo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_colls = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.tx_colls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_carrier = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.tx_carrier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_compressed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.tx_compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Monitor.NetStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rx_bytes = 1;
  if (this->_internal_rx_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rx_bytes(), target);
  }

  // uint64 rx_packets = 2;
  if (this->_internal_rx_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rx_packets(), target);
  }

  // uint64 rx_errors = 3;
  if (this->_internal_rx_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rx_errors(), target);
  }

  // uint64 rx_drops = 4;
  if (this->_internal_rx_drops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rx_drops(), target);
  }

  // uint64 rx_fifo = 5;
  if (this->_internal_rx_fifo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_rx_fifo(), target);
  }

  // uint64 rx_frame = 6;
  if (this->_internal_rx_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_rx_frame(), target);
  }

  // uint64 rx_compressed = 7;
  if (this->_internal_rx_compressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_rx_compressed(), target);
  }

  // uint64 rx_multicast = 8;
  if (this->_internal_rx_multicast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_rx_multicast(), target);
  }

  // uint64 tx_bytes = 9;
  if (this->_internal_tx_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tx_bytes(), target);
  }

  // uint64 tx_packets = 10;
  if (this->_internal_tx_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_tx_packets(), target);
  }

  // uint64 tx_errors = 11;
  if (this->_internal_tx_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_tx_errors(), target);
  }

  // uint64 tx_drops = 12;
  if (this->_internal_tx_drops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_tx_drops(), target);
  }

  // uint64 tx_fifo = 13;
  if (this->_internal_tx_fifo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_tx_fifo(), target);
  }

  // uint64 tx_colls = 14;
  if (this->_internal_tx_colls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_tx_colls(), target);
  }

  // uint64 tx_carrier = 15;
  if (this->_internal_tx_carrier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_tx_carrier(), target);
  }

  // uint64 tx_compressed = 16;
  if (this->_internal_tx_compressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_tx_compressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Monitor.NetStat)
  return target;
}

size_t NetStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Monitor.NetStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rx_bytes = 1;
  if (this->_internal_rx_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_bytes());
  }

  // uint64 rx_packets = 2;
  if (this->_internal_rx_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_packets());
  }

  // uint64 rx_errors = 3;
  if (this->_internal_rx_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_errors());
  }

  // uint64 rx_drops = 4;
  if (this->_internal_rx_drops() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_drops());
  }

  // uint64 rx_fifo = 5;
  if (this->_internal_rx_fifo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_fifo());
  }

  // uint64 rx_frame = 6;
  if (this->_internal_rx_frame() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_frame());
  }

  // uint64 rx_compressed = 7;
  if (this->_internal_rx_compressed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_compressed());
  }

  // uint64 rx_multicast = 8;
  if (this->_internal_rx_multicast() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_multicast());
  }

  // uint64 tx_bytes = 9;
  if (this->_internal_tx_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_bytes());
  }

  // uint64 tx_packets = 10;
  if (this->_internal_tx_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_packets());
  }

  // uint64 tx_errors = 11;
  if (this->_internal_tx_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_errors());
  }

  // uint64 tx_drops = 12;
  if (this->_internal_tx_drops() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_drops());
  }

  // uint64 tx_fifo = 13;
  if (this->_internal_tx_fifo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_fifo());
  }

  // uint64 tx_colls = 14;
  if (this->_internal_tx_colls() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_colls());
  }

  // uint64 tx_carrier = 15;
  if (this->_internal_tx_carrier() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_carrier());
  }

  // uint64 tx_compressed = 16;
  if (this->_internal_tx_compressed() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_tx_compressed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetStat::GetClassData() const { return &_class_data_; }


void NetStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetStat*>(&to_msg);
  auto& from = static_cast<const NetStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Monitor.NetStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rx_bytes() != 0) {
    _this->_internal_set_rx_bytes(from._internal_rx_bytes());
  }
  if (from._internal_rx_packets() != 0) {
    _this->_internal_set_rx_packets(from._internal_rx_packets());
  }
  if (from._internal_rx_errors() != 0) {
    _this->_internal_set_rx_errors(from._internal_rx_errors());
  }
  if (from._internal_rx_drops() != 0) {
    _this->_internal_set_rx_drops(from._internal_rx_drops());
  }
  if (from._internal_rx_fifo() != 0) {
    _this->_internal_set_rx_fifo(from._internal_rx_fifo());
  }
  if (from._internal_rx_frame() != 0) {
    _this->_internal_set_rx_frame(from._internal_rx_frame());
  }
  if (from._internal_rx_compressed() != 0) {
    _this->_internal_set_rx_compressed(from._internal_rx_compressed());
  }
  if (from._internal_rx_multicast() != 0) {
    _this->_internal_set_rx_multicast(from._internal_rx_multicast());
  }
  if (from._internal_tx_bytes() != 0) {
    _this->_internal_set_tx_bytes(from._internal_tx_bytes());
  }
  if (from._internal_tx_packets() != 0) {
    _this->_internal_set_tx_packets(from._internal_tx_packets());
  }
  if (from._internal_tx_errors() != 0) {
    _this->_internal_set_tx_errors(from._internal_tx_errors());
  }
  if (from._internal_tx_drops() != 0) {
    _this->_internal_set_tx_drops(from._internal_tx_drops());
  }
  if (from._internal_tx_fifo() != 0) {
    _this->_internal_set_tx_fifo(from._internal_tx_fifo());
  }
  if (from._internal_tx_colls() != 0) {
    _this->_internal_set_tx_colls(from._internal_tx_colls());
  }
  if (from._internal_tx_carrier() != 0) {
    _this->_internal_set_tx_carrier(from._internal_tx_carrier());
  }
  if (from._internal_tx_compressed() != 0) {
    _this->_internal_set_tx_compressed(from._internal_tx_compressed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetStat::CopyFrom(const NetStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Monitor.NetStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStat::IsInitialized() const {
  return true;
}

void NetStat::InternalSwap(NetStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetStat, _impl_.tx_compressed_)
      + sizeof(NetStat::_impl_.tx_compressed_)
      - PROTOBUF_FIELD_OFFSET(NetStat, _impl_.rx_bytes_)>(
          reinterpret_cast<char*>(&_impl_.rx_bytes_),
          reinterpret_cast<char*>(&other->_impl_.rx_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_5finfo_2eproto_getter, &descriptor_table_net_5finfo_2eproto_once,
      file_level_metadata_net_5finfo_2eproto[0]);
}

// ===================================================================

class NetInfo::_Internal {
 public:
  static const ::Monitor::NetStat& info(const NetInfo* msg);
};

const ::Monitor::NetStat&
NetInfo::_Internal::info(const NetInfo* msg) {
  return *msg->_impl_.info_;
}
NetInfo::NetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Monitor.NetInfo)
}
NetInfo::NetInfo(const NetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.net_name_){}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.net_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net_name().empty()) {
    _this->_impl_.net_name_.Set(from._internal_net_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Monitor::NetStat(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Monitor.NetInfo)
}

inline void NetInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.net_name_){}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.net_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetInfo::~NetInfo() {
  // @@protoc_insertion_point(destructor:Monitor.NetInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.net_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void NetInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Monitor.NetInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.net_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Monitor.NetInfo.net_name"));
        } else
          goto handle_unusual;
        continue;
      // .Monitor.NetStat info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Monitor.NetInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net_name = 1;
  if (!this->_internal_net_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net_name().data(), static_cast<int>(this->_internal_net_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Monitor.NetInfo.net_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net_name(), target);
  }

  // .Monitor.NetStat info = 2;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Monitor.NetInfo)
  return target;
}

size_t NetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Monitor.NetInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string net_name = 1;
  if (!this->_internal_net_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net_name());
  }

  // .Monitor.NetStat info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInfo::GetClassData() const { return &_class_data_; }


void NetInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInfo*>(&to_msg);
  auto& from = static_cast<const NetInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Monitor.NetInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_net_name().empty()) {
    _this->_internal_set_net_name(from._internal_net_name());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Monitor::NetStat::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInfo::CopyFrom(const NetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Monitor.NetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfo::IsInitialized() const {
  return true;
}

void NetInfo::InternalSwap(NetInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.net_name_, lhs_arena,
      &other->_impl_.net_name_, rhs_arena
  );
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_5finfo_2eproto_getter, &descriptor_table_net_5finfo_2eproto_once,
      file_level_metadata_net_5finfo_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Monitor::NetStat*
Arena::CreateMaybeMessage< ::Monitor::NetStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Monitor::NetStat >(arena);
}
template<> PROTOBUF_NOINLINE ::Monitor::NetInfo*
Arena::CreateMaybeMessage< ::Monitor::NetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Monitor::NetInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
