// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_load.proto

#include "cpu_load.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Monitor {
PROTOBUF_CONSTEXPR CpuLoad::CpuLoad(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.avg_1_)*/0
  , /*decltype(_impl_.avg_3_)*/0
  , /*decltype(_impl_.avg_15_)*/0
  , /*decltype(_impl_.nr_running_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_thread_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpuLoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuLoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuLoadDefaultTypeInternal() {}
  union {
    CpuLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuLoadDefaultTypeInternal _CpuLoad_default_instance_;
}  // namespace Monitor
static ::_pb::Metadata file_level_metadata_cpu_5fload_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cpu_5fload_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cpu_5fload_2eproto = nullptr;

const uint32_t TableStruct_cpu_5fload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuLoad, _impl_.avg_1_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuLoad, _impl_.avg_3_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuLoad, _impl_.avg_15_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuLoad, _impl_.nr_running_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuLoad, _impl_.nr_thread_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Monitor::CpuLoad)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Monitor::_CpuLoad_default_instance_._instance,
};

const char descriptor_table_protodef_cpu_5fload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016cpu_load.proto\022\007Monitor\"^\n\007CpuLoad\022\r\n\005"
  "avg_1\030\001 \001(\001\022\r\n\005avg_3\030\002 \001(\001\022\016\n\006avg_15\030\003 \001"
  "(\001\022\022\n\nnr_running\030\004 \001(\004\022\021\n\tnr_thread\030\005 \001("
  "\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_cpu_5fload_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cpu_5fload_2eproto = {
    false, false, 129, descriptor_table_protodef_cpu_5fload_2eproto,
    "cpu_load.proto",
    &descriptor_table_cpu_5fload_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_cpu_5fload_2eproto::offsets,
    file_level_metadata_cpu_5fload_2eproto, file_level_enum_descriptors_cpu_5fload_2eproto,
    file_level_service_descriptors_cpu_5fload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cpu_5fload_2eproto_getter() {
  return &descriptor_table_cpu_5fload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cpu_5fload_2eproto(&descriptor_table_cpu_5fload_2eproto);
namespace Monitor {

// ===================================================================

class CpuLoad::_Internal {
 public:
};

CpuLoad::CpuLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Monitor.CpuLoad)
}
CpuLoad::CpuLoad(const CpuLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CpuLoad* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.avg_1_){}
    , decltype(_impl_.avg_3_){}
    , decltype(_impl_.avg_15_){}
    , decltype(_impl_.nr_running_){}
    , decltype(_impl_.nr_thread_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.avg_1_, &from._impl_.avg_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nr_thread_) -
    reinterpret_cast<char*>(&_impl_.avg_1_)) + sizeof(_impl_.nr_thread_));
  // @@protoc_insertion_point(copy_constructor:Monitor.CpuLoad)
}

inline void CpuLoad::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.avg_1_){0}
    , decltype(_impl_.avg_3_){0}
    , decltype(_impl_.avg_15_){0}
    , decltype(_impl_.nr_running_){uint64_t{0u}}
    , decltype(_impl_.nr_thread_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CpuLoad::~CpuLoad() {
  // @@protoc_insertion_point(destructor:Monitor.CpuLoad)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuLoad::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:Monitor.CpuLoad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.avg_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nr_thread_) -
      reinterpret_cast<char*>(&_impl_.avg_1_)) + sizeof(_impl_.nr_thread_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuLoad::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double avg_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.avg_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double avg_3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.avg_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double avg_15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.avg_15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 nr_running = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.nr_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nr_thread = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.nr_thread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CpuLoad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Monitor.CpuLoad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double avg_1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_1 = this->_internal_avg_1();
  uint64_t raw_avg_1;
  memcpy(&raw_avg_1, &tmp_avg_1, sizeof(tmp_avg_1));
  if (raw_avg_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_avg_1(), target);
  }

  // double avg_3 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_3 = this->_internal_avg_3();
  uint64_t raw_avg_3;
  memcpy(&raw_avg_3, &tmp_avg_3, sizeof(tmp_avg_3));
  if (raw_avg_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_avg_3(), target);
  }

  // double avg_15 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_15 = this->_internal_avg_15();
  uint64_t raw_avg_15;
  memcpy(&raw_avg_15, &tmp_avg_15, sizeof(tmp_avg_15));
  if (raw_avg_15 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_avg_15(), target);
  }

  // uint64 nr_running = 4;
  if (this->_internal_nr_running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_nr_running(), target);
  }

  // uint64 nr_thread = 5;
  if (this->_internal_nr_thread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_nr_thread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Monitor.CpuLoad)
  return target;
}

size_t CpuLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Monitor.CpuLoad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double avg_1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_1 = this->_internal_avg_1();
  uint64_t raw_avg_1;
  memcpy(&raw_avg_1, &tmp_avg_1, sizeof(tmp_avg_1));
  if (raw_avg_1 != 0) {
    total_size += 1 + 8;
  }

  // double avg_3 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_3 = this->_internal_avg_3();
  uint64_t raw_avg_3;
  memcpy(&raw_avg_3, &tmp_avg_3, sizeof(tmp_avg_3));
  if (raw_avg_3 != 0) {
    total_size += 1 + 8;
  }

  // double avg_15 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_15 = this->_internal_avg_15();
  uint64_t raw_avg_15;
  memcpy(&raw_avg_15, &tmp_avg_15, sizeof(tmp_avg_15));
  if (raw_avg_15 != 0) {
    total_size += 1 + 8;
  }

  // uint64 nr_running = 4;
  if (this->_internal_nr_running() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nr_running());
  }

  // uint64 nr_thread = 5;
  if (this->_internal_nr_thread() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nr_thread());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuLoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuLoad::GetClassData() const { return &_class_data_; }


void CpuLoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuLoad*>(&to_msg);
  auto& from = static_cast<const CpuLoad&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Monitor.CpuLoad)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_1 = from._internal_avg_1();
  uint64_t raw_avg_1;
  memcpy(&raw_avg_1, &tmp_avg_1, sizeof(tmp_avg_1));
  if (raw_avg_1 != 0) {
    _this->_internal_set_avg_1(from._internal_avg_1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_3 = from._internal_avg_3();
  uint64_t raw_avg_3;
  memcpy(&raw_avg_3, &tmp_avg_3, sizeof(tmp_avg_3));
  if (raw_avg_3 != 0) {
    _this->_internal_set_avg_3(from._internal_avg_3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_15 = from._internal_avg_15();
  uint64_t raw_avg_15;
  memcpy(&raw_avg_15, &tmp_avg_15, sizeof(tmp_avg_15));
  if (raw_avg_15 != 0) {
    _this->_internal_set_avg_15(from._internal_avg_15());
  }
  if (from._internal_nr_running() != 0) {
    _this->_internal_set_nr_running(from._internal_nr_running());
  }
  if (from._internal_nr_thread() != 0) {
    _this->_internal_set_nr_thread(from._internal_nr_thread());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuLoad::CopyFrom(const CpuLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Monitor.CpuLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuLoad::IsInitialized() const {
  return true;
}

void CpuLoad::InternalSwap(CpuLoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuLoad, _impl_.nr_thread_)
      + sizeof(CpuLoad::_impl_.nr_thread_)
      - PROTOBUF_FIELD_OFFSET(CpuLoad, _impl_.avg_1_)>(
          reinterpret_cast<char*>(&_impl_.avg_1_),
          reinterpret_cast<char*>(&other->_impl_.avg_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuLoad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cpu_5fload_2eproto_getter, &descriptor_table_cpu_5fload_2eproto_once,
      file_level_metadata_cpu_5fload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Monitor::CpuLoad*
Arena::CreateMaybeMessage< ::Monitor::CpuLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Monitor::CpuLoad >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
