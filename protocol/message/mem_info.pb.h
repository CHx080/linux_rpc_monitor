// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mem_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mem_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mem_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mem_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mem_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mem_5finfo_2eproto;
namespace Monitor {
class MemInfo;
struct MemInfoDefaultTypeInternal;
extern MemInfoDefaultTypeInternal _MemInfo_default_instance_;
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::Monitor::MemInfo* Arena::CreateMaybeMessage<::Monitor::MemInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Monitor {

// ===================================================================

class MemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Monitor.MemInfo) */ {
 public:
  inline MemInfo() : MemInfo(nullptr) {}
  ~MemInfo() override;
  explicit PROTOBUF_CONSTEXPR MemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemInfo(const MemInfo& from);
  MemInfo(MemInfo&& from) noexcept
    : MemInfo() {
    *this = ::std::move(from);
  }

  inline MemInfo& operator=(const MemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfo& operator=(MemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemInfo* internal_default_instance() {
    return reinterpret_cast<const MemInfo*>(
               &_MemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemInfo& a, MemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemInfo& from) {
    MemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Monitor.MemInfo";
  }
  protected:
  explicit MemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemTotalFieldNumber = 1,
    kMemFreeFieldNumber = 2,
    kMemAvailableFieldNumber = 3,
    kBuffersFieldNumber = 4,
    kCachedFieldNumber = 5,
    kSwapCachedFieldNumber = 6,
    kActiveFieldNumber = 7,
    kInactiveFieldNumber = 8,
    kActiveAnonFieldNumber = 9,
    kInactiveAnonFieldNumber = 10,
    kActiveFileFieldNumber = 11,
    kInactiveFileFieldNumber = 12,
    kUnevictableFieldNumber = 13,
    kMlockedFieldNumber = 14,
    kSwapTotalFieldNumber = 15,
    kSwapFreeFieldNumber = 16,
    kDirtyFieldNumber = 17,
    kWritebackFieldNumber = 18,
    kAnonPagesFieldNumber = 19,
    kMappedFieldNumber = 20,
    kShmemFieldNumber = 21,
    kKReclaimableFieldNumber = 22,
    kSlabFieldNumber = 23,
    kSReclaimableFieldNumber = 24,
    kSUnreclaimFieldNumber = 25,
    kKernelStackFieldNumber = 26,
    kPageTablesFieldNumber = 27,
    kSecPageTablesFieldNumber = 28,
    kNfsUnstableFieldNumber = 29,
    kBounceFieldNumber = 30,
    kWritebackTmpFieldNumber = 31,
    kCommitLimitFieldNumber = 32,
    kCommittedAsFieldNumber = 33,
    kVmallocTotalFieldNumber = 34,
    kVmallocUsedFieldNumber = 35,
    kVmallocChunkFieldNumber = 36,
    kPercpuFieldNumber = 37,
    kHardwareCorruptedFieldNumber = 38,
    kAnonHugePagesFieldNumber = 39,
    kShmemHugePagesFieldNumber = 40,
    kShmemPmdMappedFieldNumber = 41,
    kFileHugePagesFieldNumber = 42,
    kFilePmdMappedFieldNumber = 43,
    kHugePagesTotalFieldNumber = 44,
    kHugePagesFreeFieldNumber = 45,
    kHugePagesRsvdFieldNumber = 46,
    kHugePagesSurpFieldNumber = 47,
    kHugepagesizeFieldNumber = 48,
    kHugetlbFieldNumber = 49,
    kDirectMap4KFieldNumber = 50,
    kDirectMap2MFieldNumber = 51,
    kDirectMap1GFieldNumber = 52,
  };
  // uint64 mem_total = 1;
  void clear_mem_total();
  uint64_t mem_total() const;
  void set_mem_total(uint64_t value);
  private:
  uint64_t _internal_mem_total() const;
  void _internal_set_mem_total(uint64_t value);
  public:

  // uint64 mem_free = 2;
  void clear_mem_free();
  uint64_t mem_free() const;
  void set_mem_free(uint64_t value);
  private:
  uint64_t _internal_mem_free() const;
  void _internal_set_mem_free(uint64_t value);
  public:

  // uint64 mem_available = 3;
  void clear_mem_available();
  uint64_t mem_available() const;
  void set_mem_available(uint64_t value);
  private:
  uint64_t _internal_mem_available() const;
  void _internal_set_mem_available(uint64_t value);
  public:

  // uint64 buffers = 4;
  void clear_buffers();
  uint64_t buffers() const;
  void set_buffers(uint64_t value);
  private:
  uint64_t _internal_buffers() const;
  void _internal_set_buffers(uint64_t value);
  public:

  // uint64 cached = 5;
  void clear_cached();
  uint64_t cached() const;
  void set_cached(uint64_t value);
  private:
  uint64_t _internal_cached() const;
  void _internal_set_cached(uint64_t value);
  public:

  // uint64 swap_cached = 6;
  void clear_swap_cached();
  uint64_t swap_cached() const;
  void set_swap_cached(uint64_t value);
  private:
  uint64_t _internal_swap_cached() const;
  void _internal_set_swap_cached(uint64_t value);
  public:

  // uint64 active = 7;
  void clear_active();
  uint64_t active() const;
  void set_active(uint64_t value);
  private:
  uint64_t _internal_active() const;
  void _internal_set_active(uint64_t value);
  public:

  // uint64 inactive = 8;
  void clear_inactive();
  uint64_t inactive() const;
  void set_inactive(uint64_t value);
  private:
  uint64_t _internal_inactive() const;
  void _internal_set_inactive(uint64_t value);
  public:

  // uint64 active_anon = 9;
  void clear_active_anon();
  uint64_t active_anon() const;
  void set_active_anon(uint64_t value);
  private:
  uint64_t _internal_active_anon() const;
  void _internal_set_active_anon(uint64_t value);
  public:

  // uint64 inactive_anon = 10;
  void clear_inactive_anon();
  uint64_t inactive_anon() const;
  void set_inactive_anon(uint64_t value);
  private:
  uint64_t _internal_inactive_anon() const;
  void _internal_set_inactive_anon(uint64_t value);
  public:

  // uint64 active_file = 11;
  void clear_active_file();
  uint64_t active_file() const;
  void set_active_file(uint64_t value);
  private:
  uint64_t _internal_active_file() const;
  void _internal_set_active_file(uint64_t value);
  public:

  // uint64 inactive_file = 12;
  void clear_inactive_file();
  uint64_t inactive_file() const;
  void set_inactive_file(uint64_t value);
  private:
  uint64_t _internal_inactive_file() const;
  void _internal_set_inactive_file(uint64_t value);
  public:

  // uint64 unevictable = 13;
  void clear_unevictable();
  uint64_t unevictable() const;
  void set_unevictable(uint64_t value);
  private:
  uint64_t _internal_unevictable() const;
  void _internal_set_unevictable(uint64_t value);
  public:

  // uint64 mlocked = 14;
  void clear_mlocked();
  uint64_t mlocked() const;
  void set_mlocked(uint64_t value);
  private:
  uint64_t _internal_mlocked() const;
  void _internal_set_mlocked(uint64_t value);
  public:

  // uint64 swap_total = 15;
  void clear_swap_total();
  uint64_t swap_total() const;
  void set_swap_total(uint64_t value);
  private:
  uint64_t _internal_swap_total() const;
  void _internal_set_swap_total(uint64_t value);
  public:

  // uint64 swap_free = 16;
  void clear_swap_free();
  uint64_t swap_free() const;
  void set_swap_free(uint64_t value);
  private:
  uint64_t _internal_swap_free() const;
  void _internal_set_swap_free(uint64_t value);
  public:

  // uint64 dirty = 17;
  void clear_dirty();
  uint64_t dirty() const;
  void set_dirty(uint64_t value);
  private:
  uint64_t _internal_dirty() const;
  void _internal_set_dirty(uint64_t value);
  public:

  // uint64 writeback = 18;
  void clear_writeback();
  uint64_t writeback() const;
  void set_writeback(uint64_t value);
  private:
  uint64_t _internal_writeback() const;
  void _internal_set_writeback(uint64_t value);
  public:

  // uint64 anon_pages = 19;
  void clear_anon_pages();
  uint64_t anon_pages() const;
  void set_anon_pages(uint64_t value);
  private:
  uint64_t _internal_anon_pages() const;
  void _internal_set_anon_pages(uint64_t value);
  public:

  // uint64 mapped = 20;
  void clear_mapped();
  uint64_t mapped() const;
  void set_mapped(uint64_t value);
  private:
  uint64_t _internal_mapped() const;
  void _internal_set_mapped(uint64_t value);
  public:

  // uint64 shmem = 21;
  void clear_shmem();
  uint64_t shmem() const;
  void set_shmem(uint64_t value);
  private:
  uint64_t _internal_shmem() const;
  void _internal_set_shmem(uint64_t value);
  public:

  // uint64 k_reclaimable = 22;
  void clear_k_reclaimable();
  uint64_t k_reclaimable() const;
  void set_k_reclaimable(uint64_t value);
  private:
  uint64_t _internal_k_reclaimable() const;
  void _internal_set_k_reclaimable(uint64_t value);
  public:

  // uint64 slab = 23;
  void clear_slab();
  uint64_t slab() const;
  void set_slab(uint64_t value);
  private:
  uint64_t _internal_slab() const;
  void _internal_set_slab(uint64_t value);
  public:

  // uint64 s_reclaimable = 24;
  void clear_s_reclaimable();
  uint64_t s_reclaimable() const;
  void set_s_reclaimable(uint64_t value);
  private:
  uint64_t _internal_s_reclaimable() const;
  void _internal_set_s_reclaimable(uint64_t value);
  public:

  // uint64 s_unreclaim = 25;
  void clear_s_unreclaim();
  uint64_t s_unreclaim() const;
  void set_s_unreclaim(uint64_t value);
  private:
  uint64_t _internal_s_unreclaim() const;
  void _internal_set_s_unreclaim(uint64_t value);
  public:

  // uint64 kernel_stack = 26;
  void clear_kernel_stack();
  uint64_t kernel_stack() const;
  void set_kernel_stack(uint64_t value);
  private:
  uint64_t _internal_kernel_stack() const;
  void _internal_set_kernel_stack(uint64_t value);
  public:

  // uint64 page_tables = 27;
  void clear_page_tables();
  uint64_t page_tables() const;
  void set_page_tables(uint64_t value);
  private:
  uint64_t _internal_page_tables() const;
  void _internal_set_page_tables(uint64_t value);
  public:

  // uint64 sec_page_tables = 28;
  void clear_sec_page_tables();
  uint64_t sec_page_tables() const;
  void set_sec_page_tables(uint64_t value);
  private:
  uint64_t _internal_sec_page_tables() const;
  void _internal_set_sec_page_tables(uint64_t value);
  public:

  // uint64 nfs_unstable = 29;
  void clear_nfs_unstable();
  uint64_t nfs_unstable() const;
  void set_nfs_unstable(uint64_t value);
  private:
  uint64_t _internal_nfs_unstable() const;
  void _internal_set_nfs_unstable(uint64_t value);
  public:

  // uint64 bounce = 30;
  void clear_bounce();
  uint64_t bounce() const;
  void set_bounce(uint64_t value);
  private:
  uint64_t _internal_bounce() const;
  void _internal_set_bounce(uint64_t value);
  public:

  // uint64 writeback_tmp = 31;
  void clear_writeback_tmp();
  uint64_t writeback_tmp() const;
  void set_writeback_tmp(uint64_t value);
  private:
  uint64_t _internal_writeback_tmp() const;
  void _internal_set_writeback_tmp(uint64_t value);
  public:

  // uint64 commit_limit = 32;
  void clear_commit_limit();
  uint64_t commit_limit() const;
  void set_commit_limit(uint64_t value);
  private:
  uint64_t _internal_commit_limit() const;
  void _internal_set_commit_limit(uint64_t value);
  public:

  // uint64 committed_as = 33;
  void clear_committed_as();
  uint64_t committed_as() const;
  void set_committed_as(uint64_t value);
  private:
  uint64_t _internal_committed_as() const;
  void _internal_set_committed_as(uint64_t value);
  public:

  // uint64 vmalloc_total = 34;
  void clear_vmalloc_total();
  uint64_t vmalloc_total() const;
  void set_vmalloc_total(uint64_t value);
  private:
  uint64_t _internal_vmalloc_total() const;
  void _internal_set_vmalloc_total(uint64_t value);
  public:

  // uint64 vmalloc_used = 35;
  void clear_vmalloc_used();
  uint64_t vmalloc_used() const;
  void set_vmalloc_used(uint64_t value);
  private:
  uint64_t _internal_vmalloc_used() const;
  void _internal_set_vmalloc_used(uint64_t value);
  public:

  // uint64 vmalloc_chunk = 36;
  void clear_vmalloc_chunk();
  uint64_t vmalloc_chunk() const;
  void set_vmalloc_chunk(uint64_t value);
  private:
  uint64_t _internal_vmalloc_chunk() const;
  void _internal_set_vmalloc_chunk(uint64_t value);
  public:

  // uint64 percpu = 37;
  void clear_percpu();
  uint64_t percpu() const;
  void set_percpu(uint64_t value);
  private:
  uint64_t _internal_percpu() const;
  void _internal_set_percpu(uint64_t value);
  public:

  // uint64 hardware_corrupted = 38;
  void clear_hardware_corrupted();
  uint64_t hardware_corrupted() const;
  void set_hardware_corrupted(uint64_t value);
  private:
  uint64_t _internal_hardware_corrupted() const;
  void _internal_set_hardware_corrupted(uint64_t value);
  public:

  // uint64 anon_huge_pages = 39;
  void clear_anon_huge_pages();
  uint64_t anon_huge_pages() const;
  void set_anon_huge_pages(uint64_t value);
  private:
  uint64_t _internal_anon_huge_pages() const;
  void _internal_set_anon_huge_pages(uint64_t value);
  public:

  // uint64 shmem_huge_pages = 40;
  void clear_shmem_huge_pages();
  uint64_t shmem_huge_pages() const;
  void set_shmem_huge_pages(uint64_t value);
  private:
  uint64_t _internal_shmem_huge_pages() const;
  void _internal_set_shmem_huge_pages(uint64_t value);
  public:

  // uint64 shmem_pmd_mapped = 41;
  void clear_shmem_pmd_mapped();
  uint64_t shmem_pmd_mapped() const;
  void set_shmem_pmd_mapped(uint64_t value);
  private:
  uint64_t _internal_shmem_pmd_mapped() const;
  void _internal_set_shmem_pmd_mapped(uint64_t value);
  public:

  // uint64 file_huge_pages = 42;
  void clear_file_huge_pages();
  uint64_t file_huge_pages() const;
  void set_file_huge_pages(uint64_t value);
  private:
  uint64_t _internal_file_huge_pages() const;
  void _internal_set_file_huge_pages(uint64_t value);
  public:

  // uint64 file_pmd_mapped = 43;
  void clear_file_pmd_mapped();
  uint64_t file_pmd_mapped() const;
  void set_file_pmd_mapped(uint64_t value);
  private:
  uint64_t _internal_file_pmd_mapped() const;
  void _internal_set_file_pmd_mapped(uint64_t value);
  public:

  // uint64 huge_pages_total = 44;
  void clear_huge_pages_total();
  uint64_t huge_pages_total() const;
  void set_huge_pages_total(uint64_t value);
  private:
  uint64_t _internal_huge_pages_total() const;
  void _internal_set_huge_pages_total(uint64_t value);
  public:

  // uint64 huge_pages_free = 45;
  void clear_huge_pages_free();
  uint64_t huge_pages_free() const;
  void set_huge_pages_free(uint64_t value);
  private:
  uint64_t _internal_huge_pages_free() const;
  void _internal_set_huge_pages_free(uint64_t value);
  public:

  // uint64 huge_pages_rsvd = 46;
  void clear_huge_pages_rsvd();
  uint64_t huge_pages_rsvd() const;
  void set_huge_pages_rsvd(uint64_t value);
  private:
  uint64_t _internal_huge_pages_rsvd() const;
  void _internal_set_huge_pages_rsvd(uint64_t value);
  public:

  // uint64 huge_pages_surp = 47;
  void clear_huge_pages_surp();
  uint64_t huge_pages_surp() const;
  void set_huge_pages_surp(uint64_t value);
  private:
  uint64_t _internal_huge_pages_surp() const;
  void _internal_set_huge_pages_surp(uint64_t value);
  public:

  // uint64 hugepagesize = 48;
  void clear_hugepagesize();
  uint64_t hugepagesize() const;
  void set_hugepagesize(uint64_t value);
  private:
  uint64_t _internal_hugepagesize() const;
  void _internal_set_hugepagesize(uint64_t value);
  public:

  // uint64 hugetlb = 49;
  void clear_hugetlb();
  uint64_t hugetlb() const;
  void set_hugetlb(uint64_t value);
  private:
  uint64_t _internal_hugetlb() const;
  void _internal_set_hugetlb(uint64_t value);
  public:

  // uint64 direct_map_4k = 50;
  void clear_direct_map_4k();
  uint64_t direct_map_4k() const;
  void set_direct_map_4k(uint64_t value);
  private:
  uint64_t _internal_direct_map_4k() const;
  void _internal_set_direct_map_4k(uint64_t value);
  public:

  // uint64 direct_map_2m = 51;
  void clear_direct_map_2m();
  uint64_t direct_map_2m() const;
  void set_direct_map_2m(uint64_t value);
  private:
  uint64_t _internal_direct_map_2m() const;
  void _internal_set_direct_map_2m(uint64_t value);
  public:

  // uint64 direct_map_1g = 52;
  void clear_direct_map_1g();
  uint64_t direct_map_1g() const;
  void set_direct_map_1g(uint64_t value);
  private:
  uint64_t _internal_direct_map_1g() const;
  void _internal_set_direct_map_1g(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Monitor.MemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t mem_total_;
    uint64_t mem_free_;
    uint64_t mem_available_;
    uint64_t buffers_;
    uint64_t cached_;
    uint64_t swap_cached_;
    uint64_t active_;
    uint64_t inactive_;
    uint64_t active_anon_;
    uint64_t inactive_anon_;
    uint64_t active_file_;
    uint64_t inactive_file_;
    uint64_t unevictable_;
    uint64_t mlocked_;
    uint64_t swap_total_;
    uint64_t swap_free_;
    uint64_t dirty_;
    uint64_t writeback_;
    uint64_t anon_pages_;
    uint64_t mapped_;
    uint64_t shmem_;
    uint64_t k_reclaimable_;
    uint64_t slab_;
    uint64_t s_reclaimable_;
    uint64_t s_unreclaim_;
    uint64_t kernel_stack_;
    uint64_t page_tables_;
    uint64_t sec_page_tables_;
    uint64_t nfs_unstable_;
    uint64_t bounce_;
    uint64_t writeback_tmp_;
    uint64_t commit_limit_;
    uint64_t committed_as_;
    uint64_t vmalloc_total_;
    uint64_t vmalloc_used_;
    uint64_t vmalloc_chunk_;
    uint64_t percpu_;
    uint64_t hardware_corrupted_;
    uint64_t anon_huge_pages_;
    uint64_t shmem_huge_pages_;
    uint64_t shmem_pmd_mapped_;
    uint64_t file_huge_pages_;
    uint64_t file_pmd_mapped_;
    uint64_t huge_pages_total_;
    uint64_t huge_pages_free_;
    uint64_t huge_pages_rsvd_;
    uint64_t huge_pages_surp_;
    uint64_t hugepagesize_;
    uint64_t hugetlb_;
    uint64_t direct_map_4k_;
    uint64_t direct_map_2m_;
    uint64_t direct_map_1g_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mem_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemInfo

// uint64 mem_total = 1;
inline void MemInfo::clear_mem_total() {
  _impl_.mem_total_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_mem_total() const {
  return _impl_.mem_total_;
}
inline uint64_t MemInfo::mem_total() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.mem_total)
  return _internal_mem_total();
}
inline void MemInfo::_internal_set_mem_total(uint64_t value) {
  
  _impl_.mem_total_ = value;
}
inline void MemInfo::set_mem_total(uint64_t value) {
  _internal_set_mem_total(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.mem_total)
}

// uint64 mem_free = 2;
inline void MemInfo::clear_mem_free() {
  _impl_.mem_free_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_mem_free() const {
  return _impl_.mem_free_;
}
inline uint64_t MemInfo::mem_free() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.mem_free)
  return _internal_mem_free();
}
inline void MemInfo::_internal_set_mem_free(uint64_t value) {
  
  _impl_.mem_free_ = value;
}
inline void MemInfo::set_mem_free(uint64_t value) {
  _internal_set_mem_free(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.mem_free)
}

// uint64 mem_available = 3;
inline void MemInfo::clear_mem_available() {
  _impl_.mem_available_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_mem_available() const {
  return _impl_.mem_available_;
}
inline uint64_t MemInfo::mem_available() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.mem_available)
  return _internal_mem_available();
}
inline void MemInfo::_internal_set_mem_available(uint64_t value) {
  
  _impl_.mem_available_ = value;
}
inline void MemInfo::set_mem_available(uint64_t value) {
  _internal_set_mem_available(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.mem_available)
}

// uint64 buffers = 4;
inline void MemInfo::clear_buffers() {
  _impl_.buffers_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_buffers() const {
  return _impl_.buffers_;
}
inline uint64_t MemInfo::buffers() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.buffers)
  return _internal_buffers();
}
inline void MemInfo::_internal_set_buffers(uint64_t value) {
  
  _impl_.buffers_ = value;
}
inline void MemInfo::set_buffers(uint64_t value) {
  _internal_set_buffers(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.buffers)
}

// uint64 cached = 5;
inline void MemInfo::clear_cached() {
  _impl_.cached_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_cached() const {
  return _impl_.cached_;
}
inline uint64_t MemInfo::cached() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.cached)
  return _internal_cached();
}
inline void MemInfo::_internal_set_cached(uint64_t value) {
  
  _impl_.cached_ = value;
}
inline void MemInfo::set_cached(uint64_t value) {
  _internal_set_cached(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.cached)
}

// uint64 swap_cached = 6;
inline void MemInfo::clear_swap_cached() {
  _impl_.swap_cached_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_swap_cached() const {
  return _impl_.swap_cached_;
}
inline uint64_t MemInfo::swap_cached() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.swap_cached)
  return _internal_swap_cached();
}
inline void MemInfo::_internal_set_swap_cached(uint64_t value) {
  
  _impl_.swap_cached_ = value;
}
inline void MemInfo::set_swap_cached(uint64_t value) {
  _internal_set_swap_cached(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.swap_cached)
}

// uint64 active = 7;
inline void MemInfo::clear_active() {
  _impl_.active_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_active() const {
  return _impl_.active_;
}
inline uint64_t MemInfo::active() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.active)
  return _internal_active();
}
inline void MemInfo::_internal_set_active(uint64_t value) {
  
  _impl_.active_ = value;
}
inline void MemInfo::set_active(uint64_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.active)
}

// uint64 inactive = 8;
inline void MemInfo::clear_inactive() {
  _impl_.inactive_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_inactive() const {
  return _impl_.inactive_;
}
inline uint64_t MemInfo::inactive() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.inactive)
  return _internal_inactive();
}
inline void MemInfo::_internal_set_inactive(uint64_t value) {
  
  _impl_.inactive_ = value;
}
inline void MemInfo::set_inactive(uint64_t value) {
  _internal_set_inactive(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.inactive)
}

// uint64 active_anon = 9;
inline void MemInfo::clear_active_anon() {
  _impl_.active_anon_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_active_anon() const {
  return _impl_.active_anon_;
}
inline uint64_t MemInfo::active_anon() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.active_anon)
  return _internal_active_anon();
}
inline void MemInfo::_internal_set_active_anon(uint64_t value) {
  
  _impl_.active_anon_ = value;
}
inline void MemInfo::set_active_anon(uint64_t value) {
  _internal_set_active_anon(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.active_anon)
}

// uint64 inactive_anon = 10;
inline void MemInfo::clear_inactive_anon() {
  _impl_.inactive_anon_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_inactive_anon() const {
  return _impl_.inactive_anon_;
}
inline uint64_t MemInfo::inactive_anon() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.inactive_anon)
  return _internal_inactive_anon();
}
inline void MemInfo::_internal_set_inactive_anon(uint64_t value) {
  
  _impl_.inactive_anon_ = value;
}
inline void MemInfo::set_inactive_anon(uint64_t value) {
  _internal_set_inactive_anon(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.inactive_anon)
}

// uint64 active_file = 11;
inline void MemInfo::clear_active_file() {
  _impl_.active_file_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_active_file() const {
  return _impl_.active_file_;
}
inline uint64_t MemInfo::active_file() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.active_file)
  return _internal_active_file();
}
inline void MemInfo::_internal_set_active_file(uint64_t value) {
  
  _impl_.active_file_ = value;
}
inline void MemInfo::set_active_file(uint64_t value) {
  _internal_set_active_file(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.active_file)
}

// uint64 inactive_file = 12;
inline void MemInfo::clear_inactive_file() {
  _impl_.inactive_file_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_inactive_file() const {
  return _impl_.inactive_file_;
}
inline uint64_t MemInfo::inactive_file() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.inactive_file)
  return _internal_inactive_file();
}
inline void MemInfo::_internal_set_inactive_file(uint64_t value) {
  
  _impl_.inactive_file_ = value;
}
inline void MemInfo::set_inactive_file(uint64_t value) {
  _internal_set_inactive_file(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.inactive_file)
}

// uint64 unevictable = 13;
inline void MemInfo::clear_unevictable() {
  _impl_.unevictable_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_unevictable() const {
  return _impl_.unevictable_;
}
inline uint64_t MemInfo::unevictable() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.unevictable)
  return _internal_unevictable();
}
inline void MemInfo::_internal_set_unevictable(uint64_t value) {
  
  _impl_.unevictable_ = value;
}
inline void MemInfo::set_unevictable(uint64_t value) {
  _internal_set_unevictable(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.unevictable)
}

// uint64 mlocked = 14;
inline void MemInfo::clear_mlocked() {
  _impl_.mlocked_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_mlocked() const {
  return _impl_.mlocked_;
}
inline uint64_t MemInfo::mlocked() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.mlocked)
  return _internal_mlocked();
}
inline void MemInfo::_internal_set_mlocked(uint64_t value) {
  
  _impl_.mlocked_ = value;
}
inline void MemInfo::set_mlocked(uint64_t value) {
  _internal_set_mlocked(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.mlocked)
}

// uint64 swap_total = 15;
inline void MemInfo::clear_swap_total() {
  _impl_.swap_total_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_swap_total() const {
  return _impl_.swap_total_;
}
inline uint64_t MemInfo::swap_total() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.swap_total)
  return _internal_swap_total();
}
inline void MemInfo::_internal_set_swap_total(uint64_t value) {
  
  _impl_.swap_total_ = value;
}
inline void MemInfo::set_swap_total(uint64_t value) {
  _internal_set_swap_total(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.swap_total)
}

// uint64 swap_free = 16;
inline void MemInfo::clear_swap_free() {
  _impl_.swap_free_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_swap_free() const {
  return _impl_.swap_free_;
}
inline uint64_t MemInfo::swap_free() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.swap_free)
  return _internal_swap_free();
}
inline void MemInfo::_internal_set_swap_free(uint64_t value) {
  
  _impl_.swap_free_ = value;
}
inline void MemInfo::set_swap_free(uint64_t value) {
  _internal_set_swap_free(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.swap_free)
}

// uint64 dirty = 17;
inline void MemInfo::clear_dirty() {
  _impl_.dirty_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_dirty() const {
  return _impl_.dirty_;
}
inline uint64_t MemInfo::dirty() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.dirty)
  return _internal_dirty();
}
inline void MemInfo::_internal_set_dirty(uint64_t value) {
  
  _impl_.dirty_ = value;
}
inline void MemInfo::set_dirty(uint64_t value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.dirty)
}

// uint64 writeback = 18;
inline void MemInfo::clear_writeback() {
  _impl_.writeback_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_writeback() const {
  return _impl_.writeback_;
}
inline uint64_t MemInfo::writeback() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.writeback)
  return _internal_writeback();
}
inline void MemInfo::_internal_set_writeback(uint64_t value) {
  
  _impl_.writeback_ = value;
}
inline void MemInfo::set_writeback(uint64_t value) {
  _internal_set_writeback(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.writeback)
}

// uint64 anon_pages = 19;
inline void MemInfo::clear_anon_pages() {
  _impl_.anon_pages_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_anon_pages() const {
  return _impl_.anon_pages_;
}
inline uint64_t MemInfo::anon_pages() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.anon_pages)
  return _internal_anon_pages();
}
inline void MemInfo::_internal_set_anon_pages(uint64_t value) {
  
  _impl_.anon_pages_ = value;
}
inline void MemInfo::set_anon_pages(uint64_t value) {
  _internal_set_anon_pages(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.anon_pages)
}

// uint64 mapped = 20;
inline void MemInfo::clear_mapped() {
  _impl_.mapped_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_mapped() const {
  return _impl_.mapped_;
}
inline uint64_t MemInfo::mapped() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.mapped)
  return _internal_mapped();
}
inline void MemInfo::_internal_set_mapped(uint64_t value) {
  
  _impl_.mapped_ = value;
}
inline void MemInfo::set_mapped(uint64_t value) {
  _internal_set_mapped(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.mapped)
}

// uint64 shmem = 21;
inline void MemInfo::clear_shmem() {
  _impl_.shmem_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_shmem() const {
  return _impl_.shmem_;
}
inline uint64_t MemInfo::shmem() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.shmem)
  return _internal_shmem();
}
inline void MemInfo::_internal_set_shmem(uint64_t value) {
  
  _impl_.shmem_ = value;
}
inline void MemInfo::set_shmem(uint64_t value) {
  _internal_set_shmem(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.shmem)
}

// uint64 k_reclaimable = 22;
inline void MemInfo::clear_k_reclaimable() {
  _impl_.k_reclaimable_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_k_reclaimable() const {
  return _impl_.k_reclaimable_;
}
inline uint64_t MemInfo::k_reclaimable() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.k_reclaimable)
  return _internal_k_reclaimable();
}
inline void MemInfo::_internal_set_k_reclaimable(uint64_t value) {
  
  _impl_.k_reclaimable_ = value;
}
inline void MemInfo::set_k_reclaimable(uint64_t value) {
  _internal_set_k_reclaimable(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.k_reclaimable)
}

// uint64 slab = 23;
inline void MemInfo::clear_slab() {
  _impl_.slab_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_slab() const {
  return _impl_.slab_;
}
inline uint64_t MemInfo::slab() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.slab)
  return _internal_slab();
}
inline void MemInfo::_internal_set_slab(uint64_t value) {
  
  _impl_.slab_ = value;
}
inline void MemInfo::set_slab(uint64_t value) {
  _internal_set_slab(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.slab)
}

// uint64 s_reclaimable = 24;
inline void MemInfo::clear_s_reclaimable() {
  _impl_.s_reclaimable_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_s_reclaimable() const {
  return _impl_.s_reclaimable_;
}
inline uint64_t MemInfo::s_reclaimable() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.s_reclaimable)
  return _internal_s_reclaimable();
}
inline void MemInfo::_internal_set_s_reclaimable(uint64_t value) {
  
  _impl_.s_reclaimable_ = value;
}
inline void MemInfo::set_s_reclaimable(uint64_t value) {
  _internal_set_s_reclaimable(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.s_reclaimable)
}

// uint64 s_unreclaim = 25;
inline void MemInfo::clear_s_unreclaim() {
  _impl_.s_unreclaim_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_s_unreclaim() const {
  return _impl_.s_unreclaim_;
}
inline uint64_t MemInfo::s_unreclaim() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.s_unreclaim)
  return _internal_s_unreclaim();
}
inline void MemInfo::_internal_set_s_unreclaim(uint64_t value) {
  
  _impl_.s_unreclaim_ = value;
}
inline void MemInfo::set_s_unreclaim(uint64_t value) {
  _internal_set_s_unreclaim(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.s_unreclaim)
}

// uint64 kernel_stack = 26;
inline void MemInfo::clear_kernel_stack() {
  _impl_.kernel_stack_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_kernel_stack() const {
  return _impl_.kernel_stack_;
}
inline uint64_t MemInfo::kernel_stack() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.kernel_stack)
  return _internal_kernel_stack();
}
inline void MemInfo::_internal_set_kernel_stack(uint64_t value) {
  
  _impl_.kernel_stack_ = value;
}
inline void MemInfo::set_kernel_stack(uint64_t value) {
  _internal_set_kernel_stack(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.kernel_stack)
}

// uint64 page_tables = 27;
inline void MemInfo::clear_page_tables() {
  _impl_.page_tables_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_page_tables() const {
  return _impl_.page_tables_;
}
inline uint64_t MemInfo::page_tables() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.page_tables)
  return _internal_page_tables();
}
inline void MemInfo::_internal_set_page_tables(uint64_t value) {
  
  _impl_.page_tables_ = value;
}
inline void MemInfo::set_page_tables(uint64_t value) {
  _internal_set_page_tables(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.page_tables)
}

// uint64 sec_page_tables = 28;
inline void MemInfo::clear_sec_page_tables() {
  _impl_.sec_page_tables_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_sec_page_tables() const {
  return _impl_.sec_page_tables_;
}
inline uint64_t MemInfo::sec_page_tables() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.sec_page_tables)
  return _internal_sec_page_tables();
}
inline void MemInfo::_internal_set_sec_page_tables(uint64_t value) {
  
  _impl_.sec_page_tables_ = value;
}
inline void MemInfo::set_sec_page_tables(uint64_t value) {
  _internal_set_sec_page_tables(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.sec_page_tables)
}

// uint64 nfs_unstable = 29;
inline void MemInfo::clear_nfs_unstable() {
  _impl_.nfs_unstable_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_nfs_unstable() const {
  return _impl_.nfs_unstable_;
}
inline uint64_t MemInfo::nfs_unstable() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.nfs_unstable)
  return _internal_nfs_unstable();
}
inline void MemInfo::_internal_set_nfs_unstable(uint64_t value) {
  
  _impl_.nfs_unstable_ = value;
}
inline void MemInfo::set_nfs_unstable(uint64_t value) {
  _internal_set_nfs_unstable(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.nfs_unstable)
}

// uint64 bounce = 30;
inline void MemInfo::clear_bounce() {
  _impl_.bounce_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_bounce() const {
  return _impl_.bounce_;
}
inline uint64_t MemInfo::bounce() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.bounce)
  return _internal_bounce();
}
inline void MemInfo::_internal_set_bounce(uint64_t value) {
  
  _impl_.bounce_ = value;
}
inline void MemInfo::set_bounce(uint64_t value) {
  _internal_set_bounce(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.bounce)
}

// uint64 writeback_tmp = 31;
inline void MemInfo::clear_writeback_tmp() {
  _impl_.writeback_tmp_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_writeback_tmp() const {
  return _impl_.writeback_tmp_;
}
inline uint64_t MemInfo::writeback_tmp() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.writeback_tmp)
  return _internal_writeback_tmp();
}
inline void MemInfo::_internal_set_writeback_tmp(uint64_t value) {
  
  _impl_.writeback_tmp_ = value;
}
inline void MemInfo::set_writeback_tmp(uint64_t value) {
  _internal_set_writeback_tmp(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.writeback_tmp)
}

// uint64 commit_limit = 32;
inline void MemInfo::clear_commit_limit() {
  _impl_.commit_limit_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_commit_limit() const {
  return _impl_.commit_limit_;
}
inline uint64_t MemInfo::commit_limit() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.commit_limit)
  return _internal_commit_limit();
}
inline void MemInfo::_internal_set_commit_limit(uint64_t value) {
  
  _impl_.commit_limit_ = value;
}
inline void MemInfo::set_commit_limit(uint64_t value) {
  _internal_set_commit_limit(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.commit_limit)
}

// uint64 committed_as = 33;
inline void MemInfo::clear_committed_as() {
  _impl_.committed_as_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_committed_as() const {
  return _impl_.committed_as_;
}
inline uint64_t MemInfo::committed_as() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.committed_as)
  return _internal_committed_as();
}
inline void MemInfo::_internal_set_committed_as(uint64_t value) {
  
  _impl_.committed_as_ = value;
}
inline void MemInfo::set_committed_as(uint64_t value) {
  _internal_set_committed_as(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.committed_as)
}

// uint64 vmalloc_total = 34;
inline void MemInfo::clear_vmalloc_total() {
  _impl_.vmalloc_total_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_vmalloc_total() const {
  return _impl_.vmalloc_total_;
}
inline uint64_t MemInfo::vmalloc_total() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.vmalloc_total)
  return _internal_vmalloc_total();
}
inline void MemInfo::_internal_set_vmalloc_total(uint64_t value) {
  
  _impl_.vmalloc_total_ = value;
}
inline void MemInfo::set_vmalloc_total(uint64_t value) {
  _internal_set_vmalloc_total(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.vmalloc_total)
}

// uint64 vmalloc_used = 35;
inline void MemInfo::clear_vmalloc_used() {
  _impl_.vmalloc_used_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_vmalloc_used() const {
  return _impl_.vmalloc_used_;
}
inline uint64_t MemInfo::vmalloc_used() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.vmalloc_used)
  return _internal_vmalloc_used();
}
inline void MemInfo::_internal_set_vmalloc_used(uint64_t value) {
  
  _impl_.vmalloc_used_ = value;
}
inline void MemInfo::set_vmalloc_used(uint64_t value) {
  _internal_set_vmalloc_used(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.vmalloc_used)
}

// uint64 vmalloc_chunk = 36;
inline void MemInfo::clear_vmalloc_chunk() {
  _impl_.vmalloc_chunk_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_vmalloc_chunk() const {
  return _impl_.vmalloc_chunk_;
}
inline uint64_t MemInfo::vmalloc_chunk() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.vmalloc_chunk)
  return _internal_vmalloc_chunk();
}
inline void MemInfo::_internal_set_vmalloc_chunk(uint64_t value) {
  
  _impl_.vmalloc_chunk_ = value;
}
inline void MemInfo::set_vmalloc_chunk(uint64_t value) {
  _internal_set_vmalloc_chunk(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.vmalloc_chunk)
}

// uint64 percpu = 37;
inline void MemInfo::clear_percpu() {
  _impl_.percpu_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_percpu() const {
  return _impl_.percpu_;
}
inline uint64_t MemInfo::percpu() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.percpu)
  return _internal_percpu();
}
inline void MemInfo::_internal_set_percpu(uint64_t value) {
  
  _impl_.percpu_ = value;
}
inline void MemInfo::set_percpu(uint64_t value) {
  _internal_set_percpu(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.percpu)
}

// uint64 hardware_corrupted = 38;
inline void MemInfo::clear_hardware_corrupted() {
  _impl_.hardware_corrupted_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_hardware_corrupted() const {
  return _impl_.hardware_corrupted_;
}
inline uint64_t MemInfo::hardware_corrupted() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.hardware_corrupted)
  return _internal_hardware_corrupted();
}
inline void MemInfo::_internal_set_hardware_corrupted(uint64_t value) {
  
  _impl_.hardware_corrupted_ = value;
}
inline void MemInfo::set_hardware_corrupted(uint64_t value) {
  _internal_set_hardware_corrupted(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.hardware_corrupted)
}

// uint64 anon_huge_pages = 39;
inline void MemInfo::clear_anon_huge_pages() {
  _impl_.anon_huge_pages_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_anon_huge_pages() const {
  return _impl_.anon_huge_pages_;
}
inline uint64_t MemInfo::anon_huge_pages() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.anon_huge_pages)
  return _internal_anon_huge_pages();
}
inline void MemInfo::_internal_set_anon_huge_pages(uint64_t value) {
  
  _impl_.anon_huge_pages_ = value;
}
inline void MemInfo::set_anon_huge_pages(uint64_t value) {
  _internal_set_anon_huge_pages(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.anon_huge_pages)
}

// uint64 shmem_huge_pages = 40;
inline void MemInfo::clear_shmem_huge_pages() {
  _impl_.shmem_huge_pages_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_shmem_huge_pages() const {
  return _impl_.shmem_huge_pages_;
}
inline uint64_t MemInfo::shmem_huge_pages() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.shmem_huge_pages)
  return _internal_shmem_huge_pages();
}
inline void MemInfo::_internal_set_shmem_huge_pages(uint64_t value) {
  
  _impl_.shmem_huge_pages_ = value;
}
inline void MemInfo::set_shmem_huge_pages(uint64_t value) {
  _internal_set_shmem_huge_pages(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.shmem_huge_pages)
}

// uint64 shmem_pmd_mapped = 41;
inline void MemInfo::clear_shmem_pmd_mapped() {
  _impl_.shmem_pmd_mapped_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_shmem_pmd_mapped() const {
  return _impl_.shmem_pmd_mapped_;
}
inline uint64_t MemInfo::shmem_pmd_mapped() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.shmem_pmd_mapped)
  return _internal_shmem_pmd_mapped();
}
inline void MemInfo::_internal_set_shmem_pmd_mapped(uint64_t value) {
  
  _impl_.shmem_pmd_mapped_ = value;
}
inline void MemInfo::set_shmem_pmd_mapped(uint64_t value) {
  _internal_set_shmem_pmd_mapped(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.shmem_pmd_mapped)
}

// uint64 file_huge_pages = 42;
inline void MemInfo::clear_file_huge_pages() {
  _impl_.file_huge_pages_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_file_huge_pages() const {
  return _impl_.file_huge_pages_;
}
inline uint64_t MemInfo::file_huge_pages() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.file_huge_pages)
  return _internal_file_huge_pages();
}
inline void MemInfo::_internal_set_file_huge_pages(uint64_t value) {
  
  _impl_.file_huge_pages_ = value;
}
inline void MemInfo::set_file_huge_pages(uint64_t value) {
  _internal_set_file_huge_pages(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.file_huge_pages)
}

// uint64 file_pmd_mapped = 43;
inline void MemInfo::clear_file_pmd_mapped() {
  _impl_.file_pmd_mapped_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_file_pmd_mapped() const {
  return _impl_.file_pmd_mapped_;
}
inline uint64_t MemInfo::file_pmd_mapped() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.file_pmd_mapped)
  return _internal_file_pmd_mapped();
}
inline void MemInfo::_internal_set_file_pmd_mapped(uint64_t value) {
  
  _impl_.file_pmd_mapped_ = value;
}
inline void MemInfo::set_file_pmd_mapped(uint64_t value) {
  _internal_set_file_pmd_mapped(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.file_pmd_mapped)
}

// uint64 huge_pages_total = 44;
inline void MemInfo::clear_huge_pages_total() {
  _impl_.huge_pages_total_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_huge_pages_total() const {
  return _impl_.huge_pages_total_;
}
inline uint64_t MemInfo::huge_pages_total() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.huge_pages_total)
  return _internal_huge_pages_total();
}
inline void MemInfo::_internal_set_huge_pages_total(uint64_t value) {
  
  _impl_.huge_pages_total_ = value;
}
inline void MemInfo::set_huge_pages_total(uint64_t value) {
  _internal_set_huge_pages_total(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.huge_pages_total)
}

// uint64 huge_pages_free = 45;
inline void MemInfo::clear_huge_pages_free() {
  _impl_.huge_pages_free_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_huge_pages_free() const {
  return _impl_.huge_pages_free_;
}
inline uint64_t MemInfo::huge_pages_free() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.huge_pages_free)
  return _internal_huge_pages_free();
}
inline void MemInfo::_internal_set_huge_pages_free(uint64_t value) {
  
  _impl_.huge_pages_free_ = value;
}
inline void MemInfo::set_huge_pages_free(uint64_t value) {
  _internal_set_huge_pages_free(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.huge_pages_free)
}

// uint64 huge_pages_rsvd = 46;
inline void MemInfo::clear_huge_pages_rsvd() {
  _impl_.huge_pages_rsvd_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_huge_pages_rsvd() const {
  return _impl_.huge_pages_rsvd_;
}
inline uint64_t MemInfo::huge_pages_rsvd() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.huge_pages_rsvd)
  return _internal_huge_pages_rsvd();
}
inline void MemInfo::_internal_set_huge_pages_rsvd(uint64_t value) {
  
  _impl_.huge_pages_rsvd_ = value;
}
inline void MemInfo::set_huge_pages_rsvd(uint64_t value) {
  _internal_set_huge_pages_rsvd(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.huge_pages_rsvd)
}

// uint64 huge_pages_surp = 47;
inline void MemInfo::clear_huge_pages_surp() {
  _impl_.huge_pages_surp_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_huge_pages_surp() const {
  return _impl_.huge_pages_surp_;
}
inline uint64_t MemInfo::huge_pages_surp() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.huge_pages_surp)
  return _internal_huge_pages_surp();
}
inline void MemInfo::_internal_set_huge_pages_surp(uint64_t value) {
  
  _impl_.huge_pages_surp_ = value;
}
inline void MemInfo::set_huge_pages_surp(uint64_t value) {
  _internal_set_huge_pages_surp(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.huge_pages_surp)
}

// uint64 hugepagesize = 48;
inline void MemInfo::clear_hugepagesize() {
  _impl_.hugepagesize_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_hugepagesize() const {
  return _impl_.hugepagesize_;
}
inline uint64_t MemInfo::hugepagesize() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.hugepagesize)
  return _internal_hugepagesize();
}
inline void MemInfo::_internal_set_hugepagesize(uint64_t value) {
  
  _impl_.hugepagesize_ = value;
}
inline void MemInfo::set_hugepagesize(uint64_t value) {
  _internal_set_hugepagesize(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.hugepagesize)
}

// uint64 hugetlb = 49;
inline void MemInfo::clear_hugetlb() {
  _impl_.hugetlb_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_hugetlb() const {
  return _impl_.hugetlb_;
}
inline uint64_t MemInfo::hugetlb() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.hugetlb)
  return _internal_hugetlb();
}
inline void MemInfo::_internal_set_hugetlb(uint64_t value) {
  
  _impl_.hugetlb_ = value;
}
inline void MemInfo::set_hugetlb(uint64_t value) {
  _internal_set_hugetlb(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.hugetlb)
}

// uint64 direct_map_4k = 50;
inline void MemInfo::clear_direct_map_4k() {
  _impl_.direct_map_4k_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_direct_map_4k() const {
  return _impl_.direct_map_4k_;
}
inline uint64_t MemInfo::direct_map_4k() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.direct_map_4k)
  return _internal_direct_map_4k();
}
inline void MemInfo::_internal_set_direct_map_4k(uint64_t value) {
  
  _impl_.direct_map_4k_ = value;
}
inline void MemInfo::set_direct_map_4k(uint64_t value) {
  _internal_set_direct_map_4k(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.direct_map_4k)
}

// uint64 direct_map_2m = 51;
inline void MemInfo::clear_direct_map_2m() {
  _impl_.direct_map_2m_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_direct_map_2m() const {
  return _impl_.direct_map_2m_;
}
inline uint64_t MemInfo::direct_map_2m() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.direct_map_2m)
  return _internal_direct_map_2m();
}
inline void MemInfo::_internal_set_direct_map_2m(uint64_t value) {
  
  _impl_.direct_map_2m_ = value;
}
inline void MemInfo::set_direct_map_2m(uint64_t value) {
  _internal_set_direct_map_2m(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.direct_map_2m)
}

// uint64 direct_map_1g = 52;
inline void MemInfo::clear_direct_map_1g() {
  _impl_.direct_map_1g_ = uint64_t{0u};
}
inline uint64_t MemInfo::_internal_direct_map_1g() const {
  return _impl_.direct_map_1g_;
}
inline uint64_t MemInfo::direct_map_1g() const {
  // @@protoc_insertion_point(field_get:Monitor.MemInfo.direct_map_1g)
  return _internal_direct_map_1g();
}
inline void MemInfo::_internal_set_direct_map_1g(uint64_t value) {
  
  _impl_.direct_map_1g_ = value;
}
inline void MemInfo::set_direct_map_1g(uint64_t value) {
  _internal_set_direct_map_1g(value);
  // @@protoc_insertion_point(field_set:Monitor.MemInfo.direct_map_1g)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mem_5finfo_2eproto
