// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_softirq.proto

#include "cpu_softirq.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Monitor {
PROTOBUF_CONSTEXPR CpuSoftirq::CpuSoftirq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/uint64_t{0u}
  , /*decltype(_impl_.timer_)*/uint64_t{0u}
  , /*decltype(_impl_.net_tx_)*/uint64_t{0u}
  , /*decltype(_impl_.net_rx_)*/uint64_t{0u}
  , /*decltype(_impl_.block_)*/uint64_t{0u}
  , /*decltype(_impl_.irq_poll_)*/uint64_t{0u}
  , /*decltype(_impl_.tasklet_)*/uint64_t{0u}
  , /*decltype(_impl_.sched_)*/uint64_t{0u}
  , /*decltype(_impl_.hr_timer_)*/uint64_t{0u}
  , /*decltype(_impl_.rcu_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpuSoftirqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuSoftirqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuSoftirqDefaultTypeInternal() {}
  union {
    CpuSoftirq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuSoftirqDefaultTypeInternal _CpuSoftirq_default_instance_;
}  // namespace Monitor
static ::_pb::Metadata file_level_metadata_cpu_5fsoftirq_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cpu_5fsoftirq_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cpu_5fsoftirq_2eproto = nullptr;

const uint32_t TableStruct_cpu_5fsoftirq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.timer_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.net_tx_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.net_rx_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.irq_poll_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.tasklet_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.sched_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.hr_timer_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuSoftirq, _impl_.rcu_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Monitor::CpuSoftirq)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Monitor::_CpuSoftirq_default_instance_._instance,
};

const char descriptor_table_protodef_cpu_5fsoftirq_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021cpu_softirq.proto\022\007Monitor\"\247\001\n\nCpuSoft"
  "irq\022\n\n\002hi\030\001 \001(\004\022\r\n\005timer\030\002 \001(\004\022\016\n\006net_tx"
  "\030\003 \001(\004\022\016\n\006net_rx\030\004 \001(\004\022\r\n\005block\030\005 \001(\004\022\020\n"
  "\010irq_poll\030\006 \001(\004\022\017\n\007tasklet\030\007 \001(\004\022\r\n\005sche"
  "d\030\010 \001(\004\022\020\n\010hr_timer\030\t \001(\004\022\013\n\003rcu\030\n \001(\004b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_cpu_5fsoftirq_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cpu_5fsoftirq_2eproto = {
    false, false, 206, descriptor_table_protodef_cpu_5fsoftirq_2eproto,
    "cpu_softirq.proto",
    &descriptor_table_cpu_5fsoftirq_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_cpu_5fsoftirq_2eproto::offsets,
    file_level_metadata_cpu_5fsoftirq_2eproto, file_level_enum_descriptors_cpu_5fsoftirq_2eproto,
    file_level_service_descriptors_cpu_5fsoftirq_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cpu_5fsoftirq_2eproto_getter() {
  return &descriptor_table_cpu_5fsoftirq_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cpu_5fsoftirq_2eproto(&descriptor_table_cpu_5fsoftirq_2eproto);
namespace Monitor {

// ===================================================================

class CpuSoftirq::_Internal {
 public:
};

CpuSoftirq::CpuSoftirq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Monitor.CpuSoftirq)
}
CpuSoftirq::CpuSoftirq(const CpuSoftirq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CpuSoftirq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){}
    , decltype(_impl_.timer_){}
    , decltype(_impl_.net_tx_){}
    , decltype(_impl_.net_rx_){}
    , decltype(_impl_.block_){}
    , decltype(_impl_.irq_poll_){}
    , decltype(_impl_.tasklet_){}
    , decltype(_impl_.sched_){}
    , decltype(_impl_.hr_timer_){}
    , decltype(_impl_.rcu_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hi_, &from._impl_.hi_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rcu_) -
    reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.rcu_));
  // @@protoc_insertion_point(copy_constructor:Monitor.CpuSoftirq)
}

inline void CpuSoftirq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){uint64_t{0u}}
    , decltype(_impl_.timer_){uint64_t{0u}}
    , decltype(_impl_.net_tx_){uint64_t{0u}}
    , decltype(_impl_.net_rx_){uint64_t{0u}}
    , decltype(_impl_.block_){uint64_t{0u}}
    , decltype(_impl_.irq_poll_){uint64_t{0u}}
    , decltype(_impl_.tasklet_){uint64_t{0u}}
    , decltype(_impl_.sched_){uint64_t{0u}}
    , decltype(_impl_.hr_timer_){uint64_t{0u}}
    , decltype(_impl_.rcu_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CpuSoftirq::~CpuSoftirq() {
  // @@protoc_insertion_point(destructor:Monitor.CpuSoftirq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuSoftirq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuSoftirq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuSoftirq::Clear() {
// @@protoc_insertion_point(message_clear_start:Monitor.CpuSoftirq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rcu_) -
      reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.rcu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuSoftirq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 net_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.net_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 net_rx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.net_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 irq_poll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.irq_poll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tasklet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.tasklet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sched = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.sched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hr_timer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.hr_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rcu = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.rcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CpuSoftirq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Monitor.CpuSoftirq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hi(), target);
  }

  // uint64 timer = 2;
  if (this->_internal_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timer(), target);
  }

  // uint64 net_tx = 3;
  if (this->_internal_net_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_net_tx(), target);
  }

  // uint64 net_rx = 4;
  if (this->_internal_net_rx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_net_rx(), target);
  }

  // uint64 block = 5;
  if (this->_internal_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_block(), target);
  }

  // uint64 irq_poll = 6;
  if (this->_internal_irq_poll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_irq_poll(), target);
  }

  // uint64 tasklet = 7;
  if (this->_internal_tasklet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_tasklet(), target);
  }

  // uint64 sched = 8;
  if (this->_internal_sched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_sched(), target);
  }

  // uint64 hr_timer = 9;
  if (this->_internal_hr_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_hr_timer(), target);
  }

  // uint64 rcu = 10;
  if (this->_internal_rcu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_rcu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Monitor.CpuSoftirq)
  return target;
}

size_t CpuSoftirq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Monitor.CpuSoftirq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hi());
  }

  // uint64 timer = 2;
  if (this->_internal_timer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timer());
  }

  // uint64 net_tx = 3;
  if (this->_internal_net_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_net_tx());
  }

  // uint64 net_rx = 4;
  if (this->_internal_net_rx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_net_rx());
  }

  // uint64 block = 5;
  if (this->_internal_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block());
  }

  // uint64 irq_poll = 6;
  if (this->_internal_irq_poll() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_irq_poll());
  }

  // uint64 tasklet = 7;
  if (this->_internal_tasklet() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tasklet());
  }

  // uint64 sched = 8;
  if (this->_internal_sched() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sched());
  }

  // uint64 hr_timer = 9;
  if (this->_internal_hr_timer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hr_timer());
  }

  // uint64 rcu = 10;
  if (this->_internal_rcu() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rcu());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuSoftirq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuSoftirq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuSoftirq::GetClassData() const { return &_class_data_; }


void CpuSoftirq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuSoftirq*>(&to_msg);
  auto& from = static_cast<const CpuSoftirq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Monitor.CpuSoftirq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hi() != 0) {
    _this->_internal_set_hi(from._internal_hi());
  }
  if (from._internal_timer() != 0) {
    _this->_internal_set_timer(from._internal_timer());
  }
  if (from._internal_net_tx() != 0) {
    _this->_internal_set_net_tx(from._internal_net_tx());
  }
  if (from._internal_net_rx() != 0) {
    _this->_internal_set_net_rx(from._internal_net_rx());
  }
  if (from._internal_block() != 0) {
    _this->_internal_set_block(from._internal_block());
  }
  if (from._internal_irq_poll() != 0) {
    _this->_internal_set_irq_poll(from._internal_irq_poll());
  }
  if (from._internal_tasklet() != 0) {
    _this->_internal_set_tasklet(from._internal_tasklet());
  }
  if (from._internal_sched() != 0) {
    _this->_internal_set_sched(from._internal_sched());
  }
  if (from._internal_hr_timer() != 0) {
    _this->_internal_set_hr_timer(from._internal_hr_timer());
  }
  if (from._internal_rcu() != 0) {
    _this->_internal_set_rcu(from._internal_rcu());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuSoftirq::CopyFrom(const CpuSoftirq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Monitor.CpuSoftirq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuSoftirq::IsInitialized() const {
  return true;
}

void CpuSoftirq::InternalSwap(CpuSoftirq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuSoftirq, _impl_.rcu_)
      + sizeof(CpuSoftirq::_impl_.rcu_)
      - PROTOBUF_FIELD_OFFSET(CpuSoftirq, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuSoftirq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cpu_5fsoftirq_2eproto_getter, &descriptor_table_cpu_5fsoftirq_2eproto_once,
      file_level_metadata_cpu_5fsoftirq_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Monitor::CpuSoftirq*
Arena::CreateMaybeMessage< ::Monitor::CpuSoftirq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Monitor::CpuSoftirq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
