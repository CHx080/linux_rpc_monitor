// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mem_info.proto

#include "mem_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Monitor {
PROTOBUF_CONSTEXPR MemInfo::MemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mem_total_)*/uint64_t{0u}
  , /*decltype(_impl_.mem_free_)*/uint64_t{0u}
  , /*decltype(_impl_.mem_available_)*/uint64_t{0u}
  , /*decltype(_impl_.buffers_)*/uint64_t{0u}
  , /*decltype(_impl_.cached_)*/uint64_t{0u}
  , /*decltype(_impl_.swap_cached_)*/uint64_t{0u}
  , /*decltype(_impl_.active_)*/uint64_t{0u}
  , /*decltype(_impl_.inactive_)*/uint64_t{0u}
  , /*decltype(_impl_.active_anon_)*/uint64_t{0u}
  , /*decltype(_impl_.inactive_anon_)*/uint64_t{0u}
  , /*decltype(_impl_.active_file_)*/uint64_t{0u}
  , /*decltype(_impl_.inactive_file_)*/uint64_t{0u}
  , /*decltype(_impl_.unevictable_)*/uint64_t{0u}
  , /*decltype(_impl_.mlocked_)*/uint64_t{0u}
  , /*decltype(_impl_.swap_total_)*/uint64_t{0u}
  , /*decltype(_impl_.swap_free_)*/uint64_t{0u}
  , /*decltype(_impl_.dirty_)*/uint64_t{0u}
  , /*decltype(_impl_.writeback_)*/uint64_t{0u}
  , /*decltype(_impl_.anon_pages_)*/uint64_t{0u}
  , /*decltype(_impl_.mapped_)*/uint64_t{0u}
  , /*decltype(_impl_.shmem_)*/uint64_t{0u}
  , /*decltype(_impl_.k_reclaimable_)*/uint64_t{0u}
  , /*decltype(_impl_.slab_)*/uint64_t{0u}
  , /*decltype(_impl_.s_reclaimable_)*/uint64_t{0u}
  , /*decltype(_impl_.s_unreclaim_)*/uint64_t{0u}
  , /*decltype(_impl_.kernel_stack_)*/uint64_t{0u}
  , /*decltype(_impl_.page_tables_)*/uint64_t{0u}
  , /*decltype(_impl_.sec_page_tables_)*/uint64_t{0u}
  , /*decltype(_impl_.nfs_unstable_)*/uint64_t{0u}
  , /*decltype(_impl_.bounce_)*/uint64_t{0u}
  , /*decltype(_impl_.writeback_tmp_)*/uint64_t{0u}
  , /*decltype(_impl_.commit_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.committed_as_)*/uint64_t{0u}
  , /*decltype(_impl_.vmalloc_total_)*/uint64_t{0u}
  , /*decltype(_impl_.vmalloc_used_)*/uint64_t{0u}
  , /*decltype(_impl_.vmalloc_chunk_)*/uint64_t{0u}
  , /*decltype(_impl_.percpu_)*/uint64_t{0u}
  , /*decltype(_impl_.hardware_corrupted_)*/uint64_t{0u}
  , /*decltype(_impl_.anon_huge_pages_)*/uint64_t{0u}
  , /*decltype(_impl_.shmem_huge_pages_)*/uint64_t{0u}
  , /*decltype(_impl_.shmem_pmd_mapped_)*/uint64_t{0u}
  , /*decltype(_impl_.file_huge_pages_)*/uint64_t{0u}
  , /*decltype(_impl_.file_pmd_mapped_)*/uint64_t{0u}
  , /*decltype(_impl_.huge_pages_total_)*/uint64_t{0u}
  , /*decltype(_impl_.huge_pages_free_)*/uint64_t{0u}
  , /*decltype(_impl_.huge_pages_rsvd_)*/uint64_t{0u}
  , /*decltype(_impl_.huge_pages_surp_)*/uint64_t{0u}
  , /*decltype(_impl_.hugepagesize_)*/uint64_t{0u}
  , /*decltype(_impl_.hugetlb_)*/uint64_t{0u}
  , /*decltype(_impl_.direct_map_4k_)*/uint64_t{0u}
  , /*decltype(_impl_.direct_map_2m_)*/uint64_t{0u}
  , /*decltype(_impl_.direct_map_1g_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemInfoDefaultTypeInternal() {}
  union {
    MemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemInfoDefaultTypeInternal _MemInfo_default_instance_;
}  // namespace Monitor
static ::_pb::Metadata file_level_metadata_mem_5finfo_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_mem_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mem_5finfo_2eproto = nullptr;

const uint32_t TableStruct_mem_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.mem_total_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.mem_free_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.mem_available_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.buffers_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.cached_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.swap_cached_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.active_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.inactive_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.active_anon_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.inactive_anon_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.active_file_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.inactive_file_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.unevictable_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.mlocked_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.swap_total_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.swap_free_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.dirty_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.writeback_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.anon_pages_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.mapped_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.shmem_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.k_reclaimable_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.slab_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.s_reclaimable_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.s_unreclaim_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.kernel_stack_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.page_tables_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.sec_page_tables_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.nfs_unstable_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.bounce_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.writeback_tmp_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.commit_limit_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.committed_as_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.vmalloc_total_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.vmalloc_used_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.vmalloc_chunk_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.percpu_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.hardware_corrupted_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.anon_huge_pages_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.shmem_huge_pages_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.shmem_pmd_mapped_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.file_huge_pages_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.file_pmd_mapped_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.huge_pages_total_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.huge_pages_free_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.huge_pages_rsvd_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.huge_pages_surp_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.hugepagesize_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.hugetlb_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.direct_map_4k_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.direct_map_2m_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MemInfo, _impl_.direct_map_1g_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Monitor::MemInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Monitor::_MemInfo_default_instance_._instance,
};

const char descriptor_table_protodef_mem_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016mem_info.proto\022\007Monitor\"\325\010\n\007MemInfo\022\021\n"
  "\tmem_total\030\001 \001(\004\022\020\n\010mem_free\030\002 \001(\004\022\025\n\rme"
  "m_available\030\003 \001(\004\022\017\n\007buffers\030\004 \001(\004\022\016\n\006ca"
  "ched\030\005 \001(\004\022\023\n\013swap_cached\030\006 \001(\004\022\016\n\006activ"
  "e\030\007 \001(\004\022\020\n\010inactive\030\010 \001(\004\022\023\n\013active_anon"
  "\030\t \001(\004\022\025\n\rinactive_anon\030\n \001(\004\022\023\n\013active_"
  "file\030\013 \001(\004\022\025\n\rinactive_file\030\014 \001(\004\022\023\n\013une"
  "victable\030\r \001(\004\022\017\n\007mlocked\030\016 \001(\004\022\022\n\nswap_"
  "total\030\017 \001(\004\022\021\n\tswap_free\030\020 \001(\004\022\r\n\005dirty\030"
  "\021 \001(\004\022\021\n\twriteback\030\022 \001(\004\022\022\n\nanon_pages\030\023"
  " \001(\004\022\016\n\006mapped\030\024 \001(\004\022\r\n\005shmem\030\025 \001(\004\022\025\n\rk"
  "_reclaimable\030\026 \001(\004\022\014\n\004slab\030\027 \001(\004\022\025\n\rs_re"
  "claimable\030\030 \001(\004\022\023\n\013s_unreclaim\030\031 \001(\004\022\024\n\014"
  "kernel_stack\030\032 \001(\004\022\023\n\013page_tables\030\033 \001(\004\022"
  "\027\n\017sec_page_tables\030\034 \001(\004\022\024\n\014nfs_unstable"
  "\030\035 \001(\004\022\016\n\006bounce\030\036 \001(\004\022\025\n\rwriteback_tmp\030"
  "\037 \001(\004\022\024\n\014commit_limit\030  \001(\004\022\024\n\014committed"
  "_as\030! \001(\004\022\025\n\rvmalloc_total\030\" \001(\004\022\024\n\014vmal"
  "loc_used\030# \001(\004\022\025\n\rvmalloc_chunk\030$ \001(\004\022\016\n"
  "\006percpu\030% \001(\004\022\032\n\022hardware_corrupted\030& \001("
  "\004\022\027\n\017anon_huge_pages\030\' \001(\004\022\030\n\020shmem_huge"
  "_pages\030( \001(\004\022\030\n\020shmem_pmd_mapped\030) \001(\004\022\027"
  "\n\017file_huge_pages\030* \001(\004\022\027\n\017file_pmd_mapp"
  "ed\030+ \001(\004\022\030\n\020huge_pages_total\030, \001(\004\022\027\n\017hu"
  "ge_pages_free\030- \001(\004\022\027\n\017huge_pages_rsvd\030."
  " \001(\004\022\027\n\017huge_pages_surp\030/ \001(\004\022\024\n\014hugepag"
  "esize\0300 \001(\004\022\017\n\007hugetlb\0301 \001(\004\022\025\n\rdirect_m"
  "ap_4k\0302 \001(\004\022\025\n\rdirect_map_2m\0303 \001(\004\022\025\n\rdi"
  "rect_map_1g\0304 \001(\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_mem_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mem_5finfo_2eproto = {
    false, false, 1145, descriptor_table_protodef_mem_5finfo_2eproto,
    "mem_info.proto",
    &descriptor_table_mem_5finfo_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_mem_5finfo_2eproto::offsets,
    file_level_metadata_mem_5finfo_2eproto, file_level_enum_descriptors_mem_5finfo_2eproto,
    file_level_service_descriptors_mem_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mem_5finfo_2eproto_getter() {
  return &descriptor_table_mem_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mem_5finfo_2eproto(&descriptor_table_mem_5finfo_2eproto);
namespace Monitor {

// ===================================================================

class MemInfo::_Internal {
 public:
};

MemInfo::MemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Monitor.MemInfo)
}
MemInfo::MemInfo(const MemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mem_total_){}
    , decltype(_impl_.mem_free_){}
    , decltype(_impl_.mem_available_){}
    , decltype(_impl_.buffers_){}
    , decltype(_impl_.cached_){}
    , decltype(_impl_.swap_cached_){}
    , decltype(_impl_.active_){}
    , decltype(_impl_.inactive_){}
    , decltype(_impl_.active_anon_){}
    , decltype(_impl_.inactive_anon_){}
    , decltype(_impl_.active_file_){}
    , decltype(_impl_.inactive_file_){}
    , decltype(_impl_.unevictable_){}
    , decltype(_impl_.mlocked_){}
    , decltype(_impl_.swap_total_){}
    , decltype(_impl_.swap_free_){}
    , decltype(_impl_.dirty_){}
    , decltype(_impl_.writeback_){}
    , decltype(_impl_.anon_pages_){}
    , decltype(_impl_.mapped_){}
    , decltype(_impl_.shmem_){}
    , decltype(_impl_.k_reclaimable_){}
    , decltype(_impl_.slab_){}
    , decltype(_impl_.s_reclaimable_){}
    , decltype(_impl_.s_unreclaim_){}
    , decltype(_impl_.kernel_stack_){}
    , decltype(_impl_.page_tables_){}
    , decltype(_impl_.sec_page_tables_){}
    , decltype(_impl_.nfs_unstable_){}
    , decltype(_impl_.bounce_){}
    , decltype(_impl_.writeback_tmp_){}
    , decltype(_impl_.commit_limit_){}
    , decltype(_impl_.committed_as_){}
    , decltype(_impl_.vmalloc_total_){}
    , decltype(_impl_.vmalloc_used_){}
    , decltype(_impl_.vmalloc_chunk_){}
    , decltype(_impl_.percpu_){}
    , decltype(_impl_.hardware_corrupted_){}
    , decltype(_impl_.anon_huge_pages_){}
    , decltype(_impl_.shmem_huge_pages_){}
    , decltype(_impl_.shmem_pmd_mapped_){}
    , decltype(_impl_.file_huge_pages_){}
    , decltype(_impl_.file_pmd_mapped_){}
    , decltype(_impl_.huge_pages_total_){}
    , decltype(_impl_.huge_pages_free_){}
    , decltype(_impl_.huge_pages_rsvd_){}
    , decltype(_impl_.huge_pages_surp_){}
    , decltype(_impl_.hugepagesize_){}
    , decltype(_impl_.hugetlb_){}
    , decltype(_impl_.direct_map_4k_){}
    , decltype(_impl_.direct_map_2m_){}
    , decltype(_impl_.direct_map_1g_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mem_total_, &from._impl_.mem_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direct_map_1g_) -
    reinterpret_cast<char*>(&_impl_.mem_total_)) + sizeof(_impl_.direct_map_1g_));
  // @@protoc_insertion_point(copy_constructor:Monitor.MemInfo)
}

inline void MemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mem_total_){uint64_t{0u}}
    , decltype(_impl_.mem_free_){uint64_t{0u}}
    , decltype(_impl_.mem_available_){uint64_t{0u}}
    , decltype(_impl_.buffers_){uint64_t{0u}}
    , decltype(_impl_.cached_){uint64_t{0u}}
    , decltype(_impl_.swap_cached_){uint64_t{0u}}
    , decltype(_impl_.active_){uint64_t{0u}}
    , decltype(_impl_.inactive_){uint64_t{0u}}
    , decltype(_impl_.active_anon_){uint64_t{0u}}
    , decltype(_impl_.inactive_anon_){uint64_t{0u}}
    , decltype(_impl_.active_file_){uint64_t{0u}}
    , decltype(_impl_.inactive_file_){uint64_t{0u}}
    , decltype(_impl_.unevictable_){uint64_t{0u}}
    , decltype(_impl_.mlocked_){uint64_t{0u}}
    , decltype(_impl_.swap_total_){uint64_t{0u}}
    , decltype(_impl_.swap_free_){uint64_t{0u}}
    , decltype(_impl_.dirty_){uint64_t{0u}}
    , decltype(_impl_.writeback_){uint64_t{0u}}
    , decltype(_impl_.anon_pages_){uint64_t{0u}}
    , decltype(_impl_.mapped_){uint64_t{0u}}
    , decltype(_impl_.shmem_){uint64_t{0u}}
    , decltype(_impl_.k_reclaimable_){uint64_t{0u}}
    , decltype(_impl_.slab_){uint64_t{0u}}
    , decltype(_impl_.s_reclaimable_){uint64_t{0u}}
    , decltype(_impl_.s_unreclaim_){uint64_t{0u}}
    , decltype(_impl_.kernel_stack_){uint64_t{0u}}
    , decltype(_impl_.page_tables_){uint64_t{0u}}
    , decltype(_impl_.sec_page_tables_){uint64_t{0u}}
    , decltype(_impl_.nfs_unstable_){uint64_t{0u}}
    , decltype(_impl_.bounce_){uint64_t{0u}}
    , decltype(_impl_.writeback_tmp_){uint64_t{0u}}
    , decltype(_impl_.commit_limit_){uint64_t{0u}}
    , decltype(_impl_.committed_as_){uint64_t{0u}}
    , decltype(_impl_.vmalloc_total_){uint64_t{0u}}
    , decltype(_impl_.vmalloc_used_){uint64_t{0u}}
    , decltype(_impl_.vmalloc_chunk_){uint64_t{0u}}
    , decltype(_impl_.percpu_){uint64_t{0u}}
    , decltype(_impl_.hardware_corrupted_){uint64_t{0u}}
    , decltype(_impl_.anon_huge_pages_){uint64_t{0u}}
    , decltype(_impl_.shmem_huge_pages_){uint64_t{0u}}
    , decltype(_impl_.shmem_pmd_mapped_){uint64_t{0u}}
    , decltype(_impl_.file_huge_pages_){uint64_t{0u}}
    , decltype(_impl_.file_pmd_mapped_){uint64_t{0u}}
    , decltype(_impl_.huge_pages_total_){uint64_t{0u}}
    , decltype(_impl_.huge_pages_free_){uint64_t{0u}}
    , decltype(_impl_.huge_pages_rsvd_){uint64_t{0u}}
    , decltype(_impl_.huge_pages_surp_){uint64_t{0u}}
    , decltype(_impl_.hugepagesize_){uint64_t{0u}}
    , decltype(_impl_.hugetlb_){uint64_t{0u}}
    , decltype(_impl_.direct_map_4k_){uint64_t{0u}}
    , decltype(_impl_.direct_map_2m_){uint64_t{0u}}
    , decltype(_impl_.direct_map_1g_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemInfo::~MemInfo() {
  // @@protoc_insertion_point(destructor:Monitor.MemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Monitor.MemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mem_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direct_map_1g_) -
      reinterpret_cast<char*>(&_impl_.mem_total_)) + sizeof(_impl_.direct_map_1g_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 mem_total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mem_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 mem_free = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mem_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 mem_available = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mem_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 buffers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.buffers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cached = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 swap_cached = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.swap_cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 active = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 inactive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.inactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 active_anon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.active_anon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 inactive_anon = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.inactive_anon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 active_file = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.active_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 inactive_file = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.inactive_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 unevictable = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.unevictable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 mlocked = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.mlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 swap_total = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.swap_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 swap_free = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.swap_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dirty = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.dirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 writeback = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.writeback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 anon_pages = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.anon_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 mapped = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.mapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 shmem = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.shmem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 k_reclaimable = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.k_reclaimable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 slab = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.slab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 s_reclaimable = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.s_reclaimable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 s_unreclaim = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.s_unreclaim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 kernel_stack = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.kernel_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 page_tables = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.page_tables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sec_page_tables = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.sec_page_tables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nfs_unstable = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.nfs_unstable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bounce = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.bounce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 writeback_tmp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.writeback_tmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 commit_limit = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.commit_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 committed_as = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.committed_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vmalloc_total = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vmalloc_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vmalloc_used = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vmalloc_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vmalloc_chunk = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vmalloc_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 percpu = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.percpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hardware_corrupted = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hardware_corrupted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 anon_huge_pages = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.anon_huge_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 shmem_huge_pages = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.shmem_huge_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 shmem_pmd_mapped = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.shmem_pmd_mapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_huge_pages = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.file_huge_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_pmd_mapped = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.file_pmd_mapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 huge_pages_total = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.huge_pages_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 huge_pages_free = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.huge_pages_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 huge_pages_rsvd = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.huge_pages_rsvd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 huge_pages_surp = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.huge_pages_surp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hugepagesize = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.hugepagesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hugetlb = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.hugetlb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 direct_map_4k = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.direct_map_4k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 direct_map_2m = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.direct_map_2m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 direct_map_1g = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.direct_map_1g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Monitor.MemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mem_total = 1;
  if (this->_internal_mem_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mem_total(), target);
  }

  // uint64 mem_free = 2;
  if (this->_internal_mem_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_mem_free(), target);
  }

  // uint64 mem_available = 3;
  if (this->_internal_mem_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_mem_available(), target);
  }

  // uint64 buffers = 4;
  if (this->_internal_buffers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_buffers(), target);
  }

  // uint64 cached = 5;
  if (this->_internal_cached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_cached(), target);
  }

  // uint64 swap_cached = 6;
  if (this->_internal_swap_cached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_swap_cached(), target);
  }

  // uint64 active = 7;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_active(), target);
  }

  // uint64 inactive = 8;
  if (this->_internal_inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_inactive(), target);
  }

  // uint64 active_anon = 9;
  if (this->_internal_active_anon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_active_anon(), target);
  }

  // uint64 inactive_anon = 10;
  if (this->_internal_inactive_anon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_inactive_anon(), target);
  }

  // uint64 active_file = 11;
  if (this->_internal_active_file() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_active_file(), target);
  }

  // uint64 inactive_file = 12;
  if (this->_internal_inactive_file() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_inactive_file(), target);
  }

  // uint64 unevictable = 13;
  if (this->_internal_unevictable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_unevictable(), target);
  }

  // uint64 mlocked = 14;
  if (this->_internal_mlocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_mlocked(), target);
  }

  // uint64 swap_total = 15;
  if (this->_internal_swap_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_swap_total(), target);
  }

  // uint64 swap_free = 16;
  if (this->_internal_swap_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_swap_free(), target);
  }

  // uint64 dirty = 17;
  if (this->_internal_dirty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_dirty(), target);
  }

  // uint64 writeback = 18;
  if (this->_internal_writeback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_writeback(), target);
  }

  // uint64 anon_pages = 19;
  if (this->_internal_anon_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_anon_pages(), target);
  }

  // uint64 mapped = 20;
  if (this->_internal_mapped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_mapped(), target);
  }

  // uint64 shmem = 21;
  if (this->_internal_shmem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_shmem(), target);
  }

  // uint64 k_reclaimable = 22;
  if (this->_internal_k_reclaimable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_k_reclaimable(), target);
  }

  // uint64 slab = 23;
  if (this->_internal_slab() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_slab(), target);
  }

  // uint64 s_reclaimable = 24;
  if (this->_internal_s_reclaimable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(24, this->_internal_s_reclaimable(), target);
  }

  // uint64 s_unreclaim = 25;
  if (this->_internal_s_unreclaim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(25, this->_internal_s_unreclaim(), target);
  }

  // uint64 kernel_stack = 26;
  if (this->_internal_kernel_stack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(26, this->_internal_kernel_stack(), target);
  }

  // uint64 page_tables = 27;
  if (this->_internal_page_tables() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(27, this->_internal_page_tables(), target);
  }

  // uint64 sec_page_tables = 28;
  if (this->_internal_sec_page_tables() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(28, this->_internal_sec_page_tables(), target);
  }

  // uint64 nfs_unstable = 29;
  if (this->_internal_nfs_unstable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(29, this->_internal_nfs_unstable(), target);
  }

  // uint64 bounce = 30;
  if (this->_internal_bounce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(30, this->_internal_bounce(), target);
  }

  // uint64 writeback_tmp = 31;
  if (this->_internal_writeback_tmp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_writeback_tmp(), target);
  }

  // uint64 commit_limit = 32;
  if (this->_internal_commit_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(32, this->_internal_commit_limit(), target);
  }

  // uint64 committed_as = 33;
  if (this->_internal_committed_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_committed_as(), target);
  }

  // uint64 vmalloc_total = 34;
  if (this->_internal_vmalloc_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_vmalloc_total(), target);
  }

  // uint64 vmalloc_used = 35;
  if (this->_internal_vmalloc_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_vmalloc_used(), target);
  }

  // uint64 vmalloc_chunk = 36;
  if (this->_internal_vmalloc_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(36, this->_internal_vmalloc_chunk(), target);
  }

  // uint64 percpu = 37;
  if (this->_internal_percpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(37, this->_internal_percpu(), target);
  }

  // uint64 hardware_corrupted = 38;
  if (this->_internal_hardware_corrupted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(38, this->_internal_hardware_corrupted(), target);
  }

  // uint64 anon_huge_pages = 39;
  if (this->_internal_anon_huge_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(39, this->_internal_anon_huge_pages(), target);
  }

  // uint64 shmem_huge_pages = 40;
  if (this->_internal_shmem_huge_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(40, this->_internal_shmem_huge_pages(), target);
  }

  // uint64 shmem_pmd_mapped = 41;
  if (this->_internal_shmem_pmd_mapped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(41, this->_internal_shmem_pmd_mapped(), target);
  }

  // uint64 file_huge_pages = 42;
  if (this->_internal_file_huge_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(42, this->_internal_file_huge_pages(), target);
  }

  // uint64 file_pmd_mapped = 43;
  if (this->_internal_file_pmd_mapped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(43, this->_internal_file_pmd_mapped(), target);
  }

  // uint64 huge_pages_total = 44;
  if (this->_internal_huge_pages_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(44, this->_internal_huge_pages_total(), target);
  }

  // uint64 huge_pages_free = 45;
  if (this->_internal_huge_pages_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(45, this->_internal_huge_pages_free(), target);
  }

  // uint64 huge_pages_rsvd = 46;
  if (this->_internal_huge_pages_rsvd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(46, this->_internal_huge_pages_rsvd(), target);
  }

  // uint64 huge_pages_surp = 47;
  if (this->_internal_huge_pages_surp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(47, this->_internal_huge_pages_surp(), target);
  }

  // uint64 hugepagesize = 48;
  if (this->_internal_hugepagesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(48, this->_internal_hugepagesize(), target);
  }

  // uint64 hugetlb = 49;
  if (this->_internal_hugetlb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(49, this->_internal_hugetlb(), target);
  }

  // uint64 direct_map_4k = 50;
  if (this->_internal_direct_map_4k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(50, this->_internal_direct_map_4k(), target);
  }

  // uint64 direct_map_2m = 51;
  if (this->_internal_direct_map_2m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(51, this->_internal_direct_map_2m(), target);
  }

  // uint64 direct_map_1g = 52;
  if (this->_internal_direct_map_1g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(52, this->_internal_direct_map_1g(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Monitor.MemInfo)
  return target;
}

size_t MemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Monitor.MemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mem_total = 1;
  if (this->_internal_mem_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mem_total());
  }

  // uint64 mem_free = 2;
  if (this->_internal_mem_free() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mem_free());
  }

  // uint64 mem_available = 3;
  if (this->_internal_mem_available() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mem_available());
  }

  // uint64 buffers = 4;
  if (this->_internal_buffers() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_buffers());
  }

  // uint64 cached = 5;
  if (this->_internal_cached() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cached());
  }

  // uint64 swap_cached = 6;
  if (this->_internal_swap_cached() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_swap_cached());
  }

  // uint64 active = 7;
  if (this->_internal_active() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_active());
  }

  // uint64 inactive = 8;
  if (this->_internal_inactive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_inactive());
  }

  // uint64 active_anon = 9;
  if (this->_internal_active_anon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_active_anon());
  }

  // uint64 inactive_anon = 10;
  if (this->_internal_inactive_anon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_inactive_anon());
  }

  // uint64 active_file = 11;
  if (this->_internal_active_file() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_active_file());
  }

  // uint64 inactive_file = 12;
  if (this->_internal_inactive_file() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_inactive_file());
  }

  // uint64 unevictable = 13;
  if (this->_internal_unevictable() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unevictable());
  }

  // uint64 mlocked = 14;
  if (this->_internal_mlocked() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mlocked());
  }

  // uint64 swap_total = 15;
  if (this->_internal_swap_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_swap_total());
  }

  // uint64 swap_free = 16;
  if (this->_internal_swap_free() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_swap_free());
  }

  // uint64 dirty = 17;
  if (this->_internal_dirty() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_dirty());
  }

  // uint64 writeback = 18;
  if (this->_internal_writeback() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_writeback());
  }

  // uint64 anon_pages = 19;
  if (this->_internal_anon_pages() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_anon_pages());
  }

  // uint64 mapped = 20;
  if (this->_internal_mapped() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_mapped());
  }

  // uint64 shmem = 21;
  if (this->_internal_shmem() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_shmem());
  }

  // uint64 k_reclaimable = 22;
  if (this->_internal_k_reclaimable() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_k_reclaimable());
  }

  // uint64 slab = 23;
  if (this->_internal_slab() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_slab());
  }

  // uint64 s_reclaimable = 24;
  if (this->_internal_s_reclaimable() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_s_reclaimable());
  }

  // uint64 s_unreclaim = 25;
  if (this->_internal_s_unreclaim() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_s_unreclaim());
  }

  // uint64 kernel_stack = 26;
  if (this->_internal_kernel_stack() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_kernel_stack());
  }

  // uint64 page_tables = 27;
  if (this->_internal_page_tables() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_page_tables());
  }

  // uint64 sec_page_tables = 28;
  if (this->_internal_sec_page_tables() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sec_page_tables());
  }

  // uint64 nfs_unstable = 29;
  if (this->_internal_nfs_unstable() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_nfs_unstable());
  }

  // uint64 bounce = 30;
  if (this->_internal_bounce() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bounce());
  }

  // uint64 writeback_tmp = 31;
  if (this->_internal_writeback_tmp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_writeback_tmp());
  }

  // uint64 commit_limit = 32;
  if (this->_internal_commit_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_commit_limit());
  }

  // uint64 committed_as = 33;
  if (this->_internal_committed_as() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_committed_as());
  }

  // uint64 vmalloc_total = 34;
  if (this->_internal_vmalloc_total() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_vmalloc_total());
  }

  // uint64 vmalloc_used = 35;
  if (this->_internal_vmalloc_used() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_vmalloc_used());
  }

  // uint64 vmalloc_chunk = 36;
  if (this->_internal_vmalloc_chunk() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_vmalloc_chunk());
  }

  // uint64 percpu = 37;
  if (this->_internal_percpu() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_percpu());
  }

  // uint64 hardware_corrupted = 38;
  if (this->_internal_hardware_corrupted() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_hardware_corrupted());
  }

  // uint64 anon_huge_pages = 39;
  if (this->_internal_anon_huge_pages() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_anon_huge_pages());
  }

  // uint64 shmem_huge_pages = 40;
  if (this->_internal_shmem_huge_pages() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_shmem_huge_pages());
  }

  // uint64 shmem_pmd_mapped = 41;
  if (this->_internal_shmem_pmd_mapped() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_shmem_pmd_mapped());
  }

  // uint64 file_huge_pages = 42;
  if (this->_internal_file_huge_pages() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_file_huge_pages());
  }

  // uint64 file_pmd_mapped = 43;
  if (this->_internal_file_pmd_mapped() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_file_pmd_mapped());
  }

  // uint64 huge_pages_total = 44;
  if (this->_internal_huge_pages_total() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_huge_pages_total());
  }

  // uint64 huge_pages_free = 45;
  if (this->_internal_huge_pages_free() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_huge_pages_free());
  }

  // uint64 huge_pages_rsvd = 46;
  if (this->_internal_huge_pages_rsvd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_huge_pages_rsvd());
  }

  // uint64 huge_pages_surp = 47;
  if (this->_internal_huge_pages_surp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_huge_pages_surp());
  }

  // uint64 hugepagesize = 48;
  if (this->_internal_hugepagesize() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_hugepagesize());
  }

  // uint64 hugetlb = 49;
  if (this->_internal_hugetlb() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_hugetlb());
  }

  // uint64 direct_map_4k = 50;
  if (this->_internal_direct_map_4k() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_direct_map_4k());
  }

  // uint64 direct_map_2m = 51;
  if (this->_internal_direct_map_2m() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_direct_map_2m());
  }

  // uint64 direct_map_1g = 52;
  if (this->_internal_direct_map_1g() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_direct_map_1g());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemInfo::GetClassData() const { return &_class_data_; }


void MemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemInfo*>(&to_msg);
  auto& from = static_cast<const MemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Monitor.MemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mem_total() != 0) {
    _this->_internal_set_mem_total(from._internal_mem_total());
  }
  if (from._internal_mem_free() != 0) {
    _this->_internal_set_mem_free(from._internal_mem_free());
  }
  if (from._internal_mem_available() != 0) {
    _this->_internal_set_mem_available(from._internal_mem_available());
  }
  if (from._internal_buffers() != 0) {
    _this->_internal_set_buffers(from._internal_buffers());
  }
  if (from._internal_cached() != 0) {
    _this->_internal_set_cached(from._internal_cached());
  }
  if (from._internal_swap_cached() != 0) {
    _this->_internal_set_swap_cached(from._internal_swap_cached());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  if (from._internal_inactive() != 0) {
    _this->_internal_set_inactive(from._internal_inactive());
  }
  if (from._internal_active_anon() != 0) {
    _this->_internal_set_active_anon(from._internal_active_anon());
  }
  if (from._internal_inactive_anon() != 0) {
    _this->_internal_set_inactive_anon(from._internal_inactive_anon());
  }
  if (from._internal_active_file() != 0) {
    _this->_internal_set_active_file(from._internal_active_file());
  }
  if (from._internal_inactive_file() != 0) {
    _this->_internal_set_inactive_file(from._internal_inactive_file());
  }
  if (from._internal_unevictable() != 0) {
    _this->_internal_set_unevictable(from._internal_unevictable());
  }
  if (from._internal_mlocked() != 0) {
    _this->_internal_set_mlocked(from._internal_mlocked());
  }
  if (from._internal_swap_total() != 0) {
    _this->_internal_set_swap_total(from._internal_swap_total());
  }
  if (from._internal_swap_free() != 0) {
    _this->_internal_set_swap_free(from._internal_swap_free());
  }
  if (from._internal_dirty() != 0) {
    _this->_internal_set_dirty(from._internal_dirty());
  }
  if (from._internal_writeback() != 0) {
    _this->_internal_set_writeback(from._internal_writeback());
  }
  if (from._internal_anon_pages() != 0) {
    _this->_internal_set_anon_pages(from._internal_anon_pages());
  }
  if (from._internal_mapped() != 0) {
    _this->_internal_set_mapped(from._internal_mapped());
  }
  if (from._internal_shmem() != 0) {
    _this->_internal_set_shmem(from._internal_shmem());
  }
  if (from._internal_k_reclaimable() != 0) {
    _this->_internal_set_k_reclaimable(from._internal_k_reclaimable());
  }
  if (from._internal_slab() != 0) {
    _this->_internal_set_slab(from._internal_slab());
  }
  if (from._internal_s_reclaimable() != 0) {
    _this->_internal_set_s_reclaimable(from._internal_s_reclaimable());
  }
  if (from._internal_s_unreclaim() != 0) {
    _this->_internal_set_s_unreclaim(from._internal_s_unreclaim());
  }
  if (from._internal_kernel_stack() != 0) {
    _this->_internal_set_kernel_stack(from._internal_kernel_stack());
  }
  if (from._internal_page_tables() != 0) {
    _this->_internal_set_page_tables(from._internal_page_tables());
  }
  if (from._internal_sec_page_tables() != 0) {
    _this->_internal_set_sec_page_tables(from._internal_sec_page_tables());
  }
  if (from._internal_nfs_unstable() != 0) {
    _this->_internal_set_nfs_unstable(from._internal_nfs_unstable());
  }
  if (from._internal_bounce() != 0) {
    _this->_internal_set_bounce(from._internal_bounce());
  }
  if (from._internal_writeback_tmp() != 0) {
    _this->_internal_set_writeback_tmp(from._internal_writeback_tmp());
  }
  if (from._internal_commit_limit() != 0) {
    _this->_internal_set_commit_limit(from._internal_commit_limit());
  }
  if (from._internal_committed_as() != 0) {
    _this->_internal_set_committed_as(from._internal_committed_as());
  }
  if (from._internal_vmalloc_total() != 0) {
    _this->_internal_set_vmalloc_total(from._internal_vmalloc_total());
  }
  if (from._internal_vmalloc_used() != 0) {
    _this->_internal_set_vmalloc_used(from._internal_vmalloc_used());
  }
  if (from._internal_vmalloc_chunk() != 0) {
    _this->_internal_set_vmalloc_chunk(from._internal_vmalloc_chunk());
  }
  if (from._internal_percpu() != 0) {
    _this->_internal_set_percpu(from._internal_percpu());
  }
  if (from._internal_hardware_corrupted() != 0) {
    _this->_internal_set_hardware_corrupted(from._internal_hardware_corrupted());
  }
  if (from._internal_anon_huge_pages() != 0) {
    _this->_internal_set_anon_huge_pages(from._internal_anon_huge_pages());
  }
  if (from._internal_shmem_huge_pages() != 0) {
    _this->_internal_set_shmem_huge_pages(from._internal_shmem_huge_pages());
  }
  if (from._internal_shmem_pmd_mapped() != 0) {
    _this->_internal_set_shmem_pmd_mapped(from._internal_shmem_pmd_mapped());
  }
  if (from._internal_file_huge_pages() != 0) {
    _this->_internal_set_file_huge_pages(from._internal_file_huge_pages());
  }
  if (from._internal_file_pmd_mapped() != 0) {
    _this->_internal_set_file_pmd_mapped(from._internal_file_pmd_mapped());
  }
  if (from._internal_huge_pages_total() != 0) {
    _this->_internal_set_huge_pages_total(from._internal_huge_pages_total());
  }
  if (from._internal_huge_pages_free() != 0) {
    _this->_internal_set_huge_pages_free(from._internal_huge_pages_free());
  }
  if (from._internal_huge_pages_rsvd() != 0) {
    _this->_internal_set_huge_pages_rsvd(from._internal_huge_pages_rsvd());
  }
  if (from._internal_huge_pages_surp() != 0) {
    _this->_internal_set_huge_pages_surp(from._internal_huge_pages_surp());
  }
  if (from._internal_hugepagesize() != 0) {
    _this->_internal_set_hugepagesize(from._internal_hugepagesize());
  }
  if (from._internal_hugetlb() != 0) {
    _this->_internal_set_hugetlb(from._internal_hugetlb());
  }
  if (from._internal_direct_map_4k() != 0) {
    _this->_internal_set_direct_map_4k(from._internal_direct_map_4k());
  }
  if (from._internal_direct_map_2m() != 0) {
    _this->_internal_set_direct_map_2m(from._internal_direct_map_2m());
  }
  if (from._internal_direct_map_1g() != 0) {
    _this->_internal_set_direct_map_1g(from._internal_direct_map_1g());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemInfo::CopyFrom(const MemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Monitor.MemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfo::IsInitialized() const {
  return true;
}

void MemInfo::InternalSwap(MemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.direct_map_1g_)
      + sizeof(MemInfo::_impl_.direct_map_1g_)
      - PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.mem_total_)>(
          reinterpret_cast<char*>(&_impl_.mem_total_),
          reinterpret_cast<char*>(&other->_impl_.mem_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mem_5finfo_2eproto_getter, &descriptor_table_mem_5finfo_2eproto_once,
      file_level_metadata_mem_5finfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Monitor::MemInfo*
Arena::CreateMaybeMessage< ::Monitor::MemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Monitor::MemInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
