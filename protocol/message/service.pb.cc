// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Monitor {
PROTOBUF_CONSTEXPR CpuInfo::CpuInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpu_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpu_stat_)*/nullptr
  , /*decltype(_impl_.cpu_sirq_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpuInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuInfoDefaultTypeInternal() {}
  union {
    CpuInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuInfoDefaultTypeInternal _CpuInfo_default_instance_;
PROTOBUF_CONSTEXPR MonitorInfo::MonitorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.net_info_)*/{}
  , /*decltype(_impl_.cpu_info_)*/{}
  , /*decltype(_impl_.mem_info_)*/nullptr
  , /*decltype(_impl_.cpu_load_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonitorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorInfoDefaultTypeInternal() {}
  union {
    MonitorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorInfoDefaultTypeInternal _MonitorInfo_default_instance_;
}  // namespace Monitor
static ::_pb::Metadata file_level_metadata_service_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_service_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_service_2eproto[1];

const uint32_t TableStruct_service_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuInfo, _impl_.cpu_name_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuInfo, _impl_.cpu_stat_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuInfo, _impl_.cpu_sirq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Monitor::MonitorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Monitor::MonitorInfo, _impl_.mem_info_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MonitorInfo, _impl_.cpu_load_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MonitorInfo, _impl_.net_info_),
  PROTOBUF_FIELD_OFFSET(::Monitor::MonitorInfo, _impl_.cpu_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Monitor::CpuInfo)},
  { 9, -1, -1, sizeof(::Monitor::MonitorInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Monitor::_CpuInfo_default_instance_._instance,
  &::Monitor::_MonitorInfo_default_instance_._instance,
};

const char descriptor_table_protodef_service_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rservice.proto\022\007Monitor\032\033google/protobu"
  "f/empty.proto\032\016cpu_stat.proto\032\016cpu_load."
  "proto\032\021cpu_softirq.proto\032\016mem_info.proto"
  "\032\016net_info.proto\"f\n\007CpuInfo\022\020\n\010cpu_name\030"
  "\001 \001(\t\022\"\n\010cpu_stat\030\002 \001(\0132\020.Monitor.CpuSta"
  "t\022%\n\010cpu_sirq\030\003 \001(\0132\023.Monitor.CpuSoftirq"
  "\"\235\001\n\013MonitorInfo\022\"\n\010mem_info\030\001 \001(\0132\020.Mon"
  "itor.MemInfo\022\"\n\010cpu_load\030\002 \001(\0132\020.Monitor"
  ".CpuLoad\022\"\n\010net_info\030\003 \003(\0132\020.Monitor.Net"
  "Info\022\"\n\010cpu_info\030\004 \003(\0132\020.Monitor.CpuInfo"
  "2L\n\nRpcService\022>\n\016GetMonitorInfo\022\026.googl"
  "e.protobuf.Empty\032\024.Monitor.MonitorInfoB\003"
  "\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_service_2eproto_deps[6] = {
  &::descriptor_table_cpu_5fload_2eproto,
  &::descriptor_table_cpu_5fsoftirq_2eproto,
  &::descriptor_table_cpu_5fstat_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_mem_5finfo_2eproto,
  &::descriptor_table_net_5finfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_service_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2eproto = {
    false, false, 491, descriptor_table_protodef_service_2eproto,
    "service.proto",
    &descriptor_table_service_2eproto_once, descriptor_table_service_2eproto_deps, 6, 2,
    schemas, file_default_instances, TableStruct_service_2eproto::offsets,
    file_level_metadata_service_2eproto, file_level_enum_descriptors_service_2eproto,
    file_level_service_descriptors_service_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2eproto_getter() {
  return &descriptor_table_service_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2eproto(&descriptor_table_service_2eproto);
namespace Monitor {

// ===================================================================

class CpuInfo::_Internal {
 public:
  static const ::Monitor::CpuStat& cpu_stat(const CpuInfo* msg);
  static const ::Monitor::CpuSoftirq& cpu_sirq(const CpuInfo* msg);
};

const ::Monitor::CpuStat&
CpuInfo::_Internal::cpu_stat(const CpuInfo* msg) {
  return *msg->_impl_.cpu_stat_;
}
const ::Monitor::CpuSoftirq&
CpuInfo::_Internal::cpu_sirq(const CpuInfo* msg) {
  return *msg->_impl_.cpu_sirq_;
}
void CpuInfo::clear_cpu_stat() {
  if (GetArenaForAllocation() == nullptr && _impl_.cpu_stat_ != nullptr) {
    delete _impl_.cpu_stat_;
  }
  _impl_.cpu_stat_ = nullptr;
}
void CpuInfo::clear_cpu_sirq() {
  if (GetArenaForAllocation() == nullptr && _impl_.cpu_sirq_ != nullptr) {
    delete _impl_.cpu_sirq_;
  }
  _impl_.cpu_sirq_ = nullptr;
}
CpuInfo::CpuInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Monitor.CpuInfo)
}
CpuInfo::CpuInfo(const CpuInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CpuInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_name_){}
    , decltype(_impl_.cpu_stat_){nullptr}
    , decltype(_impl_.cpu_sirq_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cpu_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu_name().empty()) {
    _this->_impl_.cpu_name_.Set(from._internal_cpu_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cpu_stat()) {
    _this->_impl_.cpu_stat_ = new ::Monitor::CpuStat(*from._impl_.cpu_stat_);
  }
  if (from._internal_has_cpu_sirq()) {
    _this->_impl_.cpu_sirq_ = new ::Monitor::CpuSoftirq(*from._impl_.cpu_sirq_);
  }
  // @@protoc_insertion_point(copy_constructor:Monitor.CpuInfo)
}

inline void CpuInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_name_){}
    , decltype(_impl_.cpu_stat_){nullptr}
    , decltype(_impl_.cpu_sirq_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cpu_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CpuInfo::~CpuInfo() {
  // @@protoc_insertion_point(destructor:Monitor.CpuInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpu_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cpu_stat_;
  if (this != internal_default_instance()) delete _impl_.cpu_sirq_;
}

void CpuInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Monitor.CpuInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cpu_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.cpu_stat_ != nullptr) {
    delete _impl_.cpu_stat_;
  }
  _impl_.cpu_stat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cpu_sirq_ != nullptr) {
    delete _impl_.cpu_sirq_;
  }
  _impl_.cpu_sirq_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cpu_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cpu_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Monitor.CpuInfo.cpu_name"));
        } else
          goto handle_unusual;
        continue;
      // .Monitor.CpuStat cpu_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Monitor.CpuSoftirq cpu_sirq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_sirq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CpuInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Monitor.CpuInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu_name = 1;
  if (!this->_internal_cpu_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_name().data(), static_cast<int>(this->_internal_cpu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Monitor.CpuInfo.cpu_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu_name(), target);
  }

  // .Monitor.CpuStat cpu_stat = 2;
  if (this->_internal_has_cpu_stat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cpu_stat(this),
        _Internal::cpu_stat(this).GetCachedSize(), target, stream);
  }

  // .Monitor.CpuSoftirq cpu_sirq = 3;
  if (this->_internal_has_cpu_sirq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cpu_sirq(this),
        _Internal::cpu_sirq(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Monitor.CpuInfo)
  return target;
}

size_t CpuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Monitor.CpuInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu_name = 1;
  if (!this->_internal_cpu_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_name());
  }

  // .Monitor.CpuStat cpu_stat = 2;
  if (this->_internal_has_cpu_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cpu_stat_);
  }

  // .Monitor.CpuSoftirq cpu_sirq = 3;
  if (this->_internal_has_cpu_sirq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cpu_sirq_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuInfo::GetClassData() const { return &_class_data_; }


void CpuInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuInfo*>(&to_msg);
  auto& from = static_cast<const CpuInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Monitor.CpuInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cpu_name().empty()) {
    _this->_internal_set_cpu_name(from._internal_cpu_name());
  }
  if (from._internal_has_cpu_stat()) {
    _this->_internal_mutable_cpu_stat()->::Monitor::CpuStat::MergeFrom(
        from._internal_cpu_stat());
  }
  if (from._internal_has_cpu_sirq()) {
    _this->_internal_mutable_cpu_sirq()->::Monitor::CpuSoftirq::MergeFrom(
        from._internal_cpu_sirq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuInfo::CopyFrom(const CpuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Monitor.CpuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuInfo::IsInitialized() const {
  return true;
}

void CpuInfo::InternalSwap(CpuInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_name_, lhs_arena,
      &other->_impl_.cpu_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuInfo, _impl_.cpu_sirq_)
      + sizeof(CpuInfo::_impl_.cpu_sirq_)
      - PROTOBUF_FIELD_OFFSET(CpuInfo, _impl_.cpu_stat_)>(
          reinterpret_cast<char*>(&_impl_.cpu_stat_),
          reinterpret_cast<char*>(&other->_impl_.cpu_stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[0]);
}

// ===================================================================

class MonitorInfo::_Internal {
 public:
  static const ::Monitor::MemInfo& mem_info(const MonitorInfo* msg);
  static const ::Monitor::CpuLoad& cpu_load(const MonitorInfo* msg);
};

const ::Monitor::MemInfo&
MonitorInfo::_Internal::mem_info(const MonitorInfo* msg) {
  return *msg->_impl_.mem_info_;
}
const ::Monitor::CpuLoad&
MonitorInfo::_Internal::cpu_load(const MonitorInfo* msg) {
  return *msg->_impl_.cpu_load_;
}
void MonitorInfo::clear_mem_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.mem_info_ != nullptr) {
    delete _impl_.mem_info_;
  }
  _impl_.mem_info_ = nullptr;
}
void MonitorInfo::clear_cpu_load() {
  if (GetArenaForAllocation() == nullptr && _impl_.cpu_load_ != nullptr) {
    delete _impl_.cpu_load_;
  }
  _impl_.cpu_load_ = nullptr;
}
void MonitorInfo::clear_net_info() {
  _impl_.net_info_.Clear();
}
MonitorInfo::MonitorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Monitor.MonitorInfo)
}
MonitorInfo::MonitorInfo(const MonitorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonitorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.net_info_){from._impl_.net_info_}
    , decltype(_impl_.cpu_info_){from._impl_.cpu_info_}
    , decltype(_impl_.mem_info_){nullptr}
    , decltype(_impl_.cpu_load_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mem_info()) {
    _this->_impl_.mem_info_ = new ::Monitor::MemInfo(*from._impl_.mem_info_);
  }
  if (from._internal_has_cpu_load()) {
    _this->_impl_.cpu_load_ = new ::Monitor::CpuLoad(*from._impl_.cpu_load_);
  }
  // @@protoc_insertion_point(copy_constructor:Monitor.MonitorInfo)
}

inline void MonitorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.net_info_){arena}
    , decltype(_impl_.cpu_info_){arena}
    , decltype(_impl_.mem_info_){nullptr}
    , decltype(_impl_.cpu_load_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MonitorInfo::~MonitorInfo() {
  // @@protoc_insertion_point(destructor:Monitor.MonitorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.net_info_.~RepeatedPtrField();
  _impl_.cpu_info_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.mem_info_;
  if (this != internal_default_instance()) delete _impl_.cpu_load_;
}

void MonitorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonitorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Monitor.MonitorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.net_info_.Clear();
  _impl_.cpu_info_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.mem_info_ != nullptr) {
    delete _impl_.mem_info_;
  }
  _impl_.mem_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cpu_load_ != nullptr) {
    delete _impl_.cpu_load_;
  }
  _impl_.cpu_load_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Monitor.MemInfo mem_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mem_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Monitor.CpuLoad cpu_load = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_load(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Monitor.NetInfo net_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_net_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Monitor.CpuInfo cpu_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Monitor.MonitorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Monitor.MemInfo mem_info = 1;
  if (this->_internal_has_mem_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mem_info(this),
        _Internal::mem_info(this).GetCachedSize(), target, stream);
  }

  // .Monitor.CpuLoad cpu_load = 2;
  if (this->_internal_has_cpu_load()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cpu_load(this),
        _Internal::cpu_load(this).GetCachedSize(), target, stream);
  }

  // repeated .Monitor.NetInfo net_info = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_net_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_net_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Monitor.CpuInfo cpu_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpu_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpu_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Monitor.MonitorInfo)
  return target;
}

size_t MonitorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Monitor.MonitorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Monitor.NetInfo net_info = 3;
  total_size += 1UL * this->_internal_net_info_size();
  for (const auto& msg : this->_impl_.net_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Monitor.CpuInfo cpu_info = 4;
  total_size += 1UL * this->_internal_cpu_info_size();
  for (const auto& msg : this->_impl_.cpu_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Monitor.MemInfo mem_info = 1;
  if (this->_internal_has_mem_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mem_info_);
  }

  // .Monitor.CpuLoad cpu_load = 2;
  if (this->_internal_has_cpu_load()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cpu_load_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonitorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorInfo::GetClassData() const { return &_class_data_; }


void MonitorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonitorInfo*>(&to_msg);
  auto& from = static_cast<const MonitorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Monitor.MonitorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.net_info_.MergeFrom(from._impl_.net_info_);
  _this->_impl_.cpu_info_.MergeFrom(from._impl_.cpu_info_);
  if (from._internal_has_mem_info()) {
    _this->_internal_mutable_mem_info()->::Monitor::MemInfo::MergeFrom(
        from._internal_mem_info());
  }
  if (from._internal_has_cpu_load()) {
    _this->_internal_mutable_cpu_load()->::Monitor::CpuLoad::MergeFrom(
        from._internal_cpu_load());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorInfo::CopyFrom(const MonitorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Monitor.MonitorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorInfo::IsInitialized() const {
  return true;
}

void MonitorInfo::InternalSwap(MonitorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.net_info_.InternalSwap(&other->_impl_.net_info_);
  _impl_.cpu_info_.InternalSwap(&other->_impl_.cpu_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_load_)
      + sizeof(MonitorInfo::_impl_.cpu_load_)
      - PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.mem_info_)>(
          reinterpret_cast<char*>(&_impl_.mem_info_),
          reinterpret_cast<char*>(&other->_impl_.mem_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[1]);
}

// ===================================================================

RpcService::~RpcService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::GetDescriptor() {
  return descriptor();
}

void RpcService::GetMonitorInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::Monitor::MonitorInfo*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMonitorInfo() not implemented.");
  done->Run();
}

void RpcService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetMonitorInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::PROTOBUF_NAMESPACE_ID::Empty*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Monitor::MonitorInfo*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Monitor::MonitorInfo::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RpcService_Stub::RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RpcService_Stub::RpcService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RpcService_Stub::~RpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcService_Stub::GetMonitorInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                              ::Monitor::MonitorInfo* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Monitor::CpuInfo*
Arena::CreateMaybeMessage< ::Monitor::CpuInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Monitor::CpuInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Monitor::MonitorInfo*
Arena::CreateMaybeMessage< ::Monitor::MonitorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Monitor::MonitorInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
