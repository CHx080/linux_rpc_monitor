// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_load.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpu_5fload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpu_5fload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpu_5fload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpu_5fload_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpu_5fload_2eproto;
namespace Monitor {
class CpuLoad;
struct CpuLoadDefaultTypeInternal;
extern CpuLoadDefaultTypeInternal _CpuLoad_default_instance_;
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::Monitor::CpuLoad* Arena::CreateMaybeMessage<::Monitor::CpuLoad>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Monitor {

// ===================================================================

class CpuLoad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Monitor.CpuLoad) */ {
 public:
  inline CpuLoad() : CpuLoad(nullptr) {}
  ~CpuLoad() override;
  explicit PROTOBUF_CONSTEXPR CpuLoad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuLoad(const CpuLoad& from);
  CpuLoad(CpuLoad&& from) noexcept
    : CpuLoad() {
    *this = ::std::move(from);
  }

  inline CpuLoad& operator=(const CpuLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuLoad& operator=(CpuLoad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuLoad& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuLoad* internal_default_instance() {
    return reinterpret_cast<const CpuLoad*>(
               &_CpuLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuLoad& a, CpuLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuLoad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuLoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuLoad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuLoad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuLoad& from) {
    CpuLoad::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuLoad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Monitor.CpuLoad";
  }
  protected:
  explicit CpuLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvg1FieldNumber = 1,
    kAvg3FieldNumber = 2,
    kAvg15FieldNumber = 3,
    kNrRunningFieldNumber = 4,
    kNrThreadFieldNumber = 5,
  };
  // double avg_1 = 1;
  void clear_avg_1();
  double avg_1() const;
  void set_avg_1(double value);
  private:
  double _internal_avg_1() const;
  void _internal_set_avg_1(double value);
  public:

  // double avg_3 = 2;
  void clear_avg_3();
  double avg_3() const;
  void set_avg_3(double value);
  private:
  double _internal_avg_3() const;
  void _internal_set_avg_3(double value);
  public:

  // double avg_15 = 3;
  void clear_avg_15();
  double avg_15() const;
  void set_avg_15(double value);
  private:
  double _internal_avg_15() const;
  void _internal_set_avg_15(double value);
  public:

  // uint64 nr_running = 4;
  void clear_nr_running();
  uint64_t nr_running() const;
  void set_nr_running(uint64_t value);
  private:
  uint64_t _internal_nr_running() const;
  void _internal_set_nr_running(uint64_t value);
  public:

  // uint64 nr_thread = 5;
  void clear_nr_thread();
  uint64_t nr_thread() const;
  void set_nr_thread(uint64_t value);
  private:
  uint64_t _internal_nr_thread() const;
  void _internal_set_nr_thread(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Monitor.CpuLoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double avg_1_;
    double avg_3_;
    double avg_15_;
    uint64_t nr_running_;
    uint64_t nr_thread_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cpu_5fload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuLoad

// double avg_1 = 1;
inline void CpuLoad::clear_avg_1() {
  _impl_.avg_1_ = 0;
}
inline double CpuLoad::_internal_avg_1() const {
  return _impl_.avg_1_;
}
inline double CpuLoad::avg_1() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuLoad.avg_1)
  return _internal_avg_1();
}
inline void CpuLoad::_internal_set_avg_1(double value) {
  
  _impl_.avg_1_ = value;
}
inline void CpuLoad::set_avg_1(double value) {
  _internal_set_avg_1(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuLoad.avg_1)
}

// double avg_3 = 2;
inline void CpuLoad::clear_avg_3() {
  _impl_.avg_3_ = 0;
}
inline double CpuLoad::_internal_avg_3() const {
  return _impl_.avg_3_;
}
inline double CpuLoad::avg_3() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuLoad.avg_3)
  return _internal_avg_3();
}
inline void CpuLoad::_internal_set_avg_3(double value) {
  
  _impl_.avg_3_ = value;
}
inline void CpuLoad::set_avg_3(double value) {
  _internal_set_avg_3(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuLoad.avg_3)
}

// double avg_15 = 3;
inline void CpuLoad::clear_avg_15() {
  _impl_.avg_15_ = 0;
}
inline double CpuLoad::_internal_avg_15() const {
  return _impl_.avg_15_;
}
inline double CpuLoad::avg_15() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuLoad.avg_15)
  return _internal_avg_15();
}
inline void CpuLoad::_internal_set_avg_15(double value) {
  
  _impl_.avg_15_ = value;
}
inline void CpuLoad::set_avg_15(double value) {
  _internal_set_avg_15(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuLoad.avg_15)
}

// uint64 nr_running = 4;
inline void CpuLoad::clear_nr_running() {
  _impl_.nr_running_ = uint64_t{0u};
}
inline uint64_t CpuLoad::_internal_nr_running() const {
  return _impl_.nr_running_;
}
inline uint64_t CpuLoad::nr_running() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuLoad.nr_running)
  return _internal_nr_running();
}
inline void CpuLoad::_internal_set_nr_running(uint64_t value) {
  
  _impl_.nr_running_ = value;
}
inline void CpuLoad::set_nr_running(uint64_t value) {
  _internal_set_nr_running(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuLoad.nr_running)
}

// uint64 nr_thread = 5;
inline void CpuLoad::clear_nr_thread() {
  _impl_.nr_thread_ = uint64_t{0u};
}
inline uint64_t CpuLoad::_internal_nr_thread() const {
  return _impl_.nr_thread_;
}
inline uint64_t CpuLoad::nr_thread() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuLoad.nr_thread)
  return _internal_nr_thread();
}
inline void CpuLoad::_internal_set_nr_thread(uint64_t value) {
  
  _impl_.nr_thread_ = value;
}
inline void CpuLoad::set_nr_thread(uint64_t value) {
  _internal_set_nr_thread(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuLoad.nr_thread)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpu_5fload_2eproto
