// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_stat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpu_5fstat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpu_5fstat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpu_5fstat_2eproto;
namespace Monitor {
class CpuStat;
struct CpuStatDefaultTypeInternal;
extern CpuStatDefaultTypeInternal _CpuStat_default_instance_;
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::Monitor::CpuStat* Arena::CreateMaybeMessage<::Monitor::CpuStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Monitor {

// ===================================================================

class CpuStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Monitor.CpuStat) */ {
 public:
  inline CpuStat() : CpuStat(nullptr) {}
  ~CpuStat() override;
  explicit PROTOBUF_CONSTEXPR CpuStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuStat(const CpuStat& from);
  CpuStat(CpuStat&& from) noexcept
    : CpuStat() {
    *this = ::std::move(from);
  }

  inline CpuStat& operator=(const CpuStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuStat& operator=(CpuStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuStat* internal_default_instance() {
    return reinterpret_cast<const CpuStat*>(
               &_CpuStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuStat& a, CpuStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuStat& from) {
    CpuStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Monitor.CpuStat";
  }
  protected:
  explicit CpuStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kNiceFieldNumber = 2,
    kSysFieldNumber = 3,
    kIdleFieldNumber = 4,
    kIowaitFieldNumber = 5,
    kIrqFieldNumber = 6,
    kSoftirqFieldNumber = 7,
    kStealFieldNumber = 8,
  };
  // double user = 1;
  void clear_user();
  double user() const;
  void set_user(double value);
  private:
  double _internal_user() const;
  void _internal_set_user(double value);
  public:

  // double nice = 2;
  void clear_nice();
  double nice() const;
  void set_nice(double value);
  private:
  double _internal_nice() const;
  void _internal_set_nice(double value);
  public:

  // double sys = 3;
  void clear_sys();
  double sys() const;
  void set_sys(double value);
  private:
  double _internal_sys() const;
  void _internal_set_sys(double value);
  public:

  // double idle = 4;
  void clear_idle();
  double idle() const;
  void set_idle(double value);
  private:
  double _internal_idle() const;
  void _internal_set_idle(double value);
  public:

  // double iowait = 5;
  void clear_iowait();
  double iowait() const;
  void set_iowait(double value);
  private:
  double _internal_iowait() const;
  void _internal_set_iowait(double value);
  public:

  // double irq = 6;
  void clear_irq();
  double irq() const;
  void set_irq(double value);
  private:
  double _internal_irq() const;
  void _internal_set_irq(double value);
  public:

  // double softirq = 7;
  void clear_softirq();
  double softirq() const;
  void set_softirq(double value);
  private:
  double _internal_softirq() const;
  void _internal_set_softirq(double value);
  public:

  // double steal = 8;
  void clear_steal();
  double steal() const;
  void set_steal(double value);
  private:
  double _internal_steal() const;
  void _internal_set_steal(double value);
  public:

  // @@protoc_insertion_point(class_scope:Monitor.CpuStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double user_;
    double nice_;
    double sys_;
    double idle_;
    double iowait_;
    double irq_;
    double softirq_;
    double steal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cpu_5fstat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuStat

// double user = 1;
inline void CpuStat::clear_user() {
  _impl_.user_ = 0;
}
inline double CpuStat::_internal_user() const {
  return _impl_.user_;
}
inline double CpuStat::user() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuStat.user)
  return _internal_user();
}
inline void CpuStat::_internal_set_user(double value) {
  
  _impl_.user_ = value;
}
inline void CpuStat::set_user(double value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuStat.user)
}

// double nice = 2;
inline void CpuStat::clear_nice() {
  _impl_.nice_ = 0;
}
inline double CpuStat::_internal_nice() const {
  return _impl_.nice_;
}
inline double CpuStat::nice() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuStat.nice)
  return _internal_nice();
}
inline void CpuStat::_internal_set_nice(double value) {
  
  _impl_.nice_ = value;
}
inline void CpuStat::set_nice(double value) {
  _internal_set_nice(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuStat.nice)
}

// double sys = 3;
inline void CpuStat::clear_sys() {
  _impl_.sys_ = 0;
}
inline double CpuStat::_internal_sys() const {
  return _impl_.sys_;
}
inline double CpuStat::sys() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuStat.sys)
  return _internal_sys();
}
inline void CpuStat::_internal_set_sys(double value) {
  
  _impl_.sys_ = value;
}
inline void CpuStat::set_sys(double value) {
  _internal_set_sys(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuStat.sys)
}

// double idle = 4;
inline void CpuStat::clear_idle() {
  _impl_.idle_ = 0;
}
inline double CpuStat::_internal_idle() const {
  return _impl_.idle_;
}
inline double CpuStat::idle() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuStat.idle)
  return _internal_idle();
}
inline void CpuStat::_internal_set_idle(double value) {
  
  _impl_.idle_ = value;
}
inline void CpuStat::set_idle(double value) {
  _internal_set_idle(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuStat.idle)
}

// double iowait = 5;
inline void CpuStat::clear_iowait() {
  _impl_.iowait_ = 0;
}
inline double CpuStat::_internal_iowait() const {
  return _impl_.iowait_;
}
inline double CpuStat::iowait() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuStat.iowait)
  return _internal_iowait();
}
inline void CpuStat::_internal_set_iowait(double value) {
  
  _impl_.iowait_ = value;
}
inline void CpuStat::set_iowait(double value) {
  _internal_set_iowait(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuStat.iowait)
}

// double irq = 6;
inline void CpuStat::clear_irq() {
  _impl_.irq_ = 0;
}
inline double CpuStat::_internal_irq() const {
  return _impl_.irq_;
}
inline double CpuStat::irq() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuStat.irq)
  return _internal_irq();
}
inline void CpuStat::_internal_set_irq(double value) {
  
  _impl_.irq_ = value;
}
inline void CpuStat::set_irq(double value) {
  _internal_set_irq(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuStat.irq)
}

// double softirq = 7;
inline void CpuStat::clear_softirq() {
  _impl_.softirq_ = 0;
}
inline double CpuStat::_internal_softirq() const {
  return _impl_.softirq_;
}
inline double CpuStat::softirq() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuStat.softirq)
  return _internal_softirq();
}
inline void CpuStat::_internal_set_softirq(double value) {
  
  _impl_.softirq_ = value;
}
inline void CpuStat::set_softirq(double value) {
  _internal_set_softirq(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuStat.softirq)
}

// double steal = 8;
inline void CpuStat::clear_steal() {
  _impl_.steal_ = 0;
}
inline double CpuStat::_internal_steal() const {
  return _impl_.steal_;
}
inline double CpuStat::steal() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuStat.steal)
  return _internal_steal();
}
inline void CpuStat::_internal_set_steal(double value) {
  
  _impl_.steal_ = value;
}
inline void CpuStat::set_steal(double value) {
  _internal_set_steal(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuStat.steal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto
