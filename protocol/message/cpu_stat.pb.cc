// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_stat.proto

#include "cpu_stat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Monitor {
PROTOBUF_CONSTEXPR CpuStat::CpuStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_.nice_)*/0
  , /*decltype(_impl_.sys_)*/0
  , /*decltype(_impl_.idle_)*/0
  , /*decltype(_impl_.iowait_)*/0
  , /*decltype(_impl_.irq_)*/0
  , /*decltype(_impl_.softirq_)*/0
  , /*decltype(_impl_.steal_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpuStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuStatDefaultTypeInternal() {}
  union {
    CpuStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuStatDefaultTypeInternal _CpuStat_default_instance_;
}  // namespace Monitor
static ::_pb::Metadata file_level_metadata_cpu_5fstat_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cpu_5fstat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cpu_5fstat_2eproto = nullptr;

const uint32_t TableStruct_cpu_5fstat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _impl_.nice_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _impl_.sys_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _impl_.idle_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _impl_.iowait_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _impl_.irq_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _impl_.softirq_),
  PROTOBUF_FIELD_OFFSET(::Monitor::CpuStat, _impl_.steal_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Monitor::CpuStat)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Monitor::_CpuStat_default_instance_._instance,
};

const char descriptor_table_protodef_cpu_5fstat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016cpu_stat.proto\022\007Monitor\"}\n\007CpuStat\022\014\n\004"
  "user\030\001 \001(\001\022\014\n\004nice\030\002 \001(\001\022\013\n\003sys\030\003 \001(\001\022\014\n"
  "\004idle\030\004 \001(\001\022\016\n\006iowait\030\005 \001(\001\022\013\n\003irq\030\006 \001(\001"
  "\022\017\n\007softirq\030\007 \001(\001\022\r\n\005steal\030\010 \001(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_cpu_5fstat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cpu_5fstat_2eproto = {
    false, false, 160, descriptor_table_protodef_cpu_5fstat_2eproto,
    "cpu_stat.proto",
    &descriptor_table_cpu_5fstat_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_cpu_5fstat_2eproto::offsets,
    file_level_metadata_cpu_5fstat_2eproto, file_level_enum_descriptors_cpu_5fstat_2eproto,
    file_level_service_descriptors_cpu_5fstat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cpu_5fstat_2eproto_getter() {
  return &descriptor_table_cpu_5fstat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cpu_5fstat_2eproto(&descriptor_table_cpu_5fstat_2eproto);
namespace Monitor {

// ===================================================================

class CpuStat::_Internal {
 public:
};

CpuStat::CpuStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Monitor.CpuStat)
}
CpuStat::CpuStat(const CpuStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CpuStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.nice_){}
    , decltype(_impl_.sys_){}
    , decltype(_impl_.idle_){}
    , decltype(_impl_.iowait_){}
    , decltype(_impl_.irq_){}
    , decltype(_impl_.softirq_){}
    , decltype(_impl_.steal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_, &from._impl_.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steal_) -
    reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.steal_));
  // @@protoc_insertion_point(copy_constructor:Monitor.CpuStat)
}

inline void CpuStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){0}
    , decltype(_impl_.nice_){0}
    , decltype(_impl_.sys_){0}
    , decltype(_impl_.idle_){0}
    , decltype(_impl_.iowait_){0}
    , decltype(_impl_.irq_){0}
    , decltype(_impl_.softirq_){0}
    , decltype(_impl_.steal_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CpuStat::~CpuStat() {
  // @@protoc_insertion_point(destructor:Monitor.CpuStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuStat::Clear() {
// @@protoc_insertion_point(message_clear_start:Monitor.CpuStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.steal_) -
      reinterpret_cast<char*>(&_impl_.user_)) + sizeof(_impl_.steal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double nice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.nice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.sys_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double idle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.idle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double iowait = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.iowait_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double irq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.irq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double softirq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.softirq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.steal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CpuStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Monitor.CpuStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double user = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_user = this->_internal_user();
  uint64_t raw_user;
  memcpy(&raw_user, &tmp_user, sizeof(tmp_user));
  if (raw_user != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_user(), target);
  }

  // double nice = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nice = this->_internal_nice();
  uint64_t raw_nice;
  memcpy(&raw_nice, &tmp_nice, sizeof(tmp_nice));
  if (raw_nice != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_nice(), target);
  }

  // double sys = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys = this->_internal_sys();
  uint64_t raw_sys;
  memcpy(&raw_sys, &tmp_sys, sizeof(tmp_sys));
  if (raw_sys != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_sys(), target);
  }

  // double idle = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_idle = this->_internal_idle();
  uint64_t raw_idle;
  memcpy(&raw_idle, &tmp_idle, sizeof(tmp_idle));
  if (raw_idle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_idle(), target);
  }

  // double iowait = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iowait = this->_internal_iowait();
  uint64_t raw_iowait;
  memcpy(&raw_iowait, &tmp_iowait, sizeof(tmp_iowait));
  if (raw_iowait != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_iowait(), target);
  }

  // double irq = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_irq = this->_internal_irq();
  uint64_t raw_irq;
  memcpy(&raw_irq, &tmp_irq, sizeof(tmp_irq));
  if (raw_irq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_irq(), target);
  }

  // double softirq = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_softirq = this->_internal_softirq();
  uint64_t raw_softirq;
  memcpy(&raw_softirq, &tmp_softirq, sizeof(tmp_softirq));
  if (raw_softirq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_softirq(), target);
  }

  // double steal = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steal = this->_internal_steal();
  uint64_t raw_steal;
  memcpy(&raw_steal, &tmp_steal, sizeof(tmp_steal));
  if (raw_steal != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_steal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Monitor.CpuStat)
  return target;
}

size_t CpuStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Monitor.CpuStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double user = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_user = this->_internal_user();
  uint64_t raw_user;
  memcpy(&raw_user, &tmp_user, sizeof(tmp_user));
  if (raw_user != 0) {
    total_size += 1 + 8;
  }

  // double nice = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nice = this->_internal_nice();
  uint64_t raw_nice;
  memcpy(&raw_nice, &tmp_nice, sizeof(tmp_nice));
  if (raw_nice != 0) {
    total_size += 1 + 8;
  }

  // double sys = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys = this->_internal_sys();
  uint64_t raw_sys;
  memcpy(&raw_sys, &tmp_sys, sizeof(tmp_sys));
  if (raw_sys != 0) {
    total_size += 1 + 8;
  }

  // double idle = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_idle = this->_internal_idle();
  uint64_t raw_idle;
  memcpy(&raw_idle, &tmp_idle, sizeof(tmp_idle));
  if (raw_idle != 0) {
    total_size += 1 + 8;
  }

  // double iowait = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iowait = this->_internal_iowait();
  uint64_t raw_iowait;
  memcpy(&raw_iowait, &tmp_iowait, sizeof(tmp_iowait));
  if (raw_iowait != 0) {
    total_size += 1 + 8;
  }

  // double irq = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_irq = this->_internal_irq();
  uint64_t raw_irq;
  memcpy(&raw_irq, &tmp_irq, sizeof(tmp_irq));
  if (raw_irq != 0) {
    total_size += 1 + 8;
  }

  // double softirq = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_softirq = this->_internal_softirq();
  uint64_t raw_softirq;
  memcpy(&raw_softirq, &tmp_softirq, sizeof(tmp_softirq));
  if (raw_softirq != 0) {
    total_size += 1 + 8;
  }

  // double steal = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steal = this->_internal_steal();
  uint64_t raw_steal;
  memcpy(&raw_steal, &tmp_steal, sizeof(tmp_steal));
  if (raw_steal != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuStat::GetClassData() const { return &_class_data_; }


void CpuStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuStat*>(&to_msg);
  auto& from = static_cast<const CpuStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Monitor.CpuStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_user = from._internal_user();
  uint64_t raw_user;
  memcpy(&raw_user, &tmp_user, sizeof(tmp_user));
  if (raw_user != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nice = from._internal_nice();
  uint64_t raw_nice;
  memcpy(&raw_nice, &tmp_nice, sizeof(tmp_nice));
  if (raw_nice != 0) {
    _this->_internal_set_nice(from._internal_nice());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sys = from._internal_sys();
  uint64_t raw_sys;
  memcpy(&raw_sys, &tmp_sys, sizeof(tmp_sys));
  if (raw_sys != 0) {
    _this->_internal_set_sys(from._internal_sys());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_idle = from._internal_idle();
  uint64_t raw_idle;
  memcpy(&raw_idle, &tmp_idle, sizeof(tmp_idle));
  if (raw_idle != 0) {
    _this->_internal_set_idle(from._internal_idle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iowait = from._internal_iowait();
  uint64_t raw_iowait;
  memcpy(&raw_iowait, &tmp_iowait, sizeof(tmp_iowait));
  if (raw_iowait != 0) {
    _this->_internal_set_iowait(from._internal_iowait());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_irq = from._internal_irq();
  uint64_t raw_irq;
  memcpy(&raw_irq, &tmp_irq, sizeof(tmp_irq));
  if (raw_irq != 0) {
    _this->_internal_set_irq(from._internal_irq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_softirq = from._internal_softirq();
  uint64_t raw_softirq;
  memcpy(&raw_softirq, &tmp_softirq, sizeof(tmp_softirq));
  if (raw_softirq != 0) {
    _this->_internal_set_softirq(from._internal_softirq());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steal = from._internal_steal();
  uint64_t raw_steal;
  memcpy(&raw_steal, &tmp_steal, sizeof(tmp_steal));
  if (raw_steal != 0) {
    _this->_internal_set_steal(from._internal_steal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuStat::CopyFrom(const CpuStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Monitor.CpuStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuStat::IsInitialized() const {
  return true;
}

void CpuStat::InternalSwap(CpuStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuStat, _impl_.steal_)
      + sizeof(CpuStat::_impl_.steal_)
      - PROTOBUF_FIELD_OFFSET(CpuStat, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cpu_5fstat_2eproto_getter, &descriptor_table_cpu_5fstat_2eproto_once,
      file_level_metadata_cpu_5fstat_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Monitor::CpuStat*
Arena::CreateMaybeMessage< ::Monitor::CpuStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Monitor::CpuStat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
