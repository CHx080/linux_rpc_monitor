// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_softirq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpu_5fsoftirq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpu_5fsoftirq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpu_5fsoftirq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpu_5fsoftirq_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpu_5fsoftirq_2eproto;
namespace Monitor {
class CpuSoftirq;
struct CpuSoftirqDefaultTypeInternal;
extern CpuSoftirqDefaultTypeInternal _CpuSoftirq_default_instance_;
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::Monitor::CpuSoftirq* Arena::CreateMaybeMessage<::Monitor::CpuSoftirq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Monitor {

// ===================================================================

class CpuSoftirq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Monitor.CpuSoftirq) */ {
 public:
  inline CpuSoftirq() : CpuSoftirq(nullptr) {}
  ~CpuSoftirq() override;
  explicit PROTOBUF_CONSTEXPR CpuSoftirq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuSoftirq(const CpuSoftirq& from);
  CpuSoftirq(CpuSoftirq&& from) noexcept
    : CpuSoftirq() {
    *this = ::std::move(from);
  }

  inline CpuSoftirq& operator=(const CpuSoftirq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuSoftirq& operator=(CpuSoftirq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuSoftirq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuSoftirq* internal_default_instance() {
    return reinterpret_cast<const CpuSoftirq*>(
               &_CpuSoftirq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuSoftirq& a, CpuSoftirq& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuSoftirq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuSoftirq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuSoftirq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuSoftirq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuSoftirq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuSoftirq& from) {
    CpuSoftirq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuSoftirq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Monitor.CpuSoftirq";
  }
  protected:
  explicit CpuSoftirq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kTimerFieldNumber = 2,
    kNetTxFieldNumber = 3,
    kNetRxFieldNumber = 4,
    kBlockFieldNumber = 5,
    kIrqPollFieldNumber = 6,
    kTaskletFieldNumber = 7,
    kSchedFieldNumber = 8,
    kHrTimerFieldNumber = 9,
    kRcuFieldNumber = 10,
  };
  // uint64 hi = 1;
  void clear_hi();
  uint64_t hi() const;
  void set_hi(uint64_t value);
  private:
  uint64_t _internal_hi() const;
  void _internal_set_hi(uint64_t value);
  public:

  // uint64 timer = 2;
  void clear_timer();
  uint64_t timer() const;
  void set_timer(uint64_t value);
  private:
  uint64_t _internal_timer() const;
  void _internal_set_timer(uint64_t value);
  public:

  // uint64 net_tx = 3;
  void clear_net_tx();
  uint64_t net_tx() const;
  void set_net_tx(uint64_t value);
  private:
  uint64_t _internal_net_tx() const;
  void _internal_set_net_tx(uint64_t value);
  public:

  // uint64 net_rx = 4;
  void clear_net_rx();
  uint64_t net_rx() const;
  void set_net_rx(uint64_t value);
  private:
  uint64_t _internal_net_rx() const;
  void _internal_set_net_rx(uint64_t value);
  public:

  // uint64 block = 5;
  void clear_block();
  uint64_t block() const;
  void set_block(uint64_t value);
  private:
  uint64_t _internal_block() const;
  void _internal_set_block(uint64_t value);
  public:

  // uint64 irq_poll = 6;
  void clear_irq_poll();
  uint64_t irq_poll() const;
  void set_irq_poll(uint64_t value);
  private:
  uint64_t _internal_irq_poll() const;
  void _internal_set_irq_poll(uint64_t value);
  public:

  // uint64 tasklet = 7;
  void clear_tasklet();
  uint64_t tasklet() const;
  void set_tasklet(uint64_t value);
  private:
  uint64_t _internal_tasklet() const;
  void _internal_set_tasklet(uint64_t value);
  public:

  // uint64 sched = 8;
  void clear_sched();
  uint64_t sched() const;
  void set_sched(uint64_t value);
  private:
  uint64_t _internal_sched() const;
  void _internal_set_sched(uint64_t value);
  public:

  // uint64 hr_timer = 9;
  void clear_hr_timer();
  uint64_t hr_timer() const;
  void set_hr_timer(uint64_t value);
  private:
  uint64_t _internal_hr_timer() const;
  void _internal_set_hr_timer(uint64_t value);
  public:

  // uint64 rcu = 10;
  void clear_rcu();
  uint64_t rcu() const;
  void set_rcu(uint64_t value);
  private:
  uint64_t _internal_rcu() const;
  void _internal_set_rcu(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Monitor.CpuSoftirq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t hi_;
    uint64_t timer_;
    uint64_t net_tx_;
    uint64_t net_rx_;
    uint64_t block_;
    uint64_t irq_poll_;
    uint64_t tasklet_;
    uint64_t sched_;
    uint64_t hr_timer_;
    uint64_t rcu_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cpu_5fsoftirq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuSoftirq

// uint64 hi = 1;
inline void CpuSoftirq::clear_hi() {
  _impl_.hi_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_hi() const {
  return _impl_.hi_;
}
inline uint64_t CpuSoftirq::hi() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.hi)
  return _internal_hi();
}
inline void CpuSoftirq::_internal_set_hi(uint64_t value) {
  
  _impl_.hi_ = value;
}
inline void CpuSoftirq::set_hi(uint64_t value) {
  _internal_set_hi(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.hi)
}

// uint64 timer = 2;
inline void CpuSoftirq::clear_timer() {
  _impl_.timer_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_timer() const {
  return _impl_.timer_;
}
inline uint64_t CpuSoftirq::timer() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.timer)
  return _internal_timer();
}
inline void CpuSoftirq::_internal_set_timer(uint64_t value) {
  
  _impl_.timer_ = value;
}
inline void CpuSoftirq::set_timer(uint64_t value) {
  _internal_set_timer(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.timer)
}

// uint64 net_tx = 3;
inline void CpuSoftirq::clear_net_tx() {
  _impl_.net_tx_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_net_tx() const {
  return _impl_.net_tx_;
}
inline uint64_t CpuSoftirq::net_tx() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.net_tx)
  return _internal_net_tx();
}
inline void CpuSoftirq::_internal_set_net_tx(uint64_t value) {
  
  _impl_.net_tx_ = value;
}
inline void CpuSoftirq::set_net_tx(uint64_t value) {
  _internal_set_net_tx(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.net_tx)
}

// uint64 net_rx = 4;
inline void CpuSoftirq::clear_net_rx() {
  _impl_.net_rx_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_net_rx() const {
  return _impl_.net_rx_;
}
inline uint64_t CpuSoftirq::net_rx() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.net_rx)
  return _internal_net_rx();
}
inline void CpuSoftirq::_internal_set_net_rx(uint64_t value) {
  
  _impl_.net_rx_ = value;
}
inline void CpuSoftirq::set_net_rx(uint64_t value) {
  _internal_set_net_rx(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.net_rx)
}

// uint64 block = 5;
inline void CpuSoftirq::clear_block() {
  _impl_.block_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_block() const {
  return _impl_.block_;
}
inline uint64_t CpuSoftirq::block() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.block)
  return _internal_block();
}
inline void CpuSoftirq::_internal_set_block(uint64_t value) {
  
  _impl_.block_ = value;
}
inline void CpuSoftirq::set_block(uint64_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.block)
}

// uint64 irq_poll = 6;
inline void CpuSoftirq::clear_irq_poll() {
  _impl_.irq_poll_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_irq_poll() const {
  return _impl_.irq_poll_;
}
inline uint64_t CpuSoftirq::irq_poll() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.irq_poll)
  return _internal_irq_poll();
}
inline void CpuSoftirq::_internal_set_irq_poll(uint64_t value) {
  
  _impl_.irq_poll_ = value;
}
inline void CpuSoftirq::set_irq_poll(uint64_t value) {
  _internal_set_irq_poll(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.irq_poll)
}

// uint64 tasklet = 7;
inline void CpuSoftirq::clear_tasklet() {
  _impl_.tasklet_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_tasklet() const {
  return _impl_.tasklet_;
}
inline uint64_t CpuSoftirq::tasklet() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.tasklet)
  return _internal_tasklet();
}
inline void CpuSoftirq::_internal_set_tasklet(uint64_t value) {
  
  _impl_.tasklet_ = value;
}
inline void CpuSoftirq::set_tasklet(uint64_t value) {
  _internal_set_tasklet(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.tasklet)
}

// uint64 sched = 8;
inline void CpuSoftirq::clear_sched() {
  _impl_.sched_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_sched() const {
  return _impl_.sched_;
}
inline uint64_t CpuSoftirq::sched() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.sched)
  return _internal_sched();
}
inline void CpuSoftirq::_internal_set_sched(uint64_t value) {
  
  _impl_.sched_ = value;
}
inline void CpuSoftirq::set_sched(uint64_t value) {
  _internal_set_sched(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.sched)
}

// uint64 hr_timer = 9;
inline void CpuSoftirq::clear_hr_timer() {
  _impl_.hr_timer_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_hr_timer() const {
  return _impl_.hr_timer_;
}
inline uint64_t CpuSoftirq::hr_timer() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.hr_timer)
  return _internal_hr_timer();
}
inline void CpuSoftirq::_internal_set_hr_timer(uint64_t value) {
  
  _impl_.hr_timer_ = value;
}
inline void CpuSoftirq::set_hr_timer(uint64_t value) {
  _internal_set_hr_timer(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.hr_timer)
}

// uint64 rcu = 10;
inline void CpuSoftirq::clear_rcu() {
  _impl_.rcu_ = uint64_t{0u};
}
inline uint64_t CpuSoftirq::_internal_rcu() const {
  return _impl_.rcu_;
}
inline uint64_t CpuSoftirq::rcu() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuSoftirq.rcu)
  return _internal_rcu();
}
inline void CpuSoftirq::_internal_set_rcu(uint64_t value) {
  
  _impl_.rcu_ = value;
}
inline void CpuSoftirq::set_rcu(uint64_t value) {
  _internal_set_rcu(value);
  // @@protoc_insertion_point(field_set:Monitor.CpuSoftirq.rcu)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpu_5fsoftirq_2eproto
