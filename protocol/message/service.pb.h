// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "cpu_stat.pb.h"
#include "cpu_load.pb.h"
#include "cpu_softirq.pb.h"
#include "mem_info.pb.h"
#include "net_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2eproto;
namespace Monitor {
class CpuInfo;
struct CpuInfoDefaultTypeInternal;
extern CpuInfoDefaultTypeInternal _CpuInfo_default_instance_;
class MonitorInfo;
struct MonitorInfoDefaultTypeInternal;
extern MonitorInfoDefaultTypeInternal _MonitorInfo_default_instance_;
}  // namespace Monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::Monitor::CpuInfo* Arena::CreateMaybeMessage<::Monitor::CpuInfo>(Arena*);
template<> ::Monitor::MonitorInfo* Arena::CreateMaybeMessage<::Monitor::MonitorInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Monitor {

// ===================================================================

class CpuInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Monitor.CpuInfo) */ {
 public:
  inline CpuInfo() : CpuInfo(nullptr) {}
  ~CpuInfo() override;
  explicit PROTOBUF_CONSTEXPR CpuInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuInfo(const CpuInfo& from);
  CpuInfo(CpuInfo&& from) noexcept
    : CpuInfo() {
    *this = ::std::move(from);
  }

  inline CpuInfo& operator=(const CpuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfo& operator=(CpuInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuInfo* internal_default_instance() {
    return reinterpret_cast<const CpuInfo*>(
               &_CpuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuInfo& a, CpuInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuInfo& from) {
    CpuInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Monitor.CpuInfo";
  }
  protected:
  explicit CpuInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuNameFieldNumber = 1,
    kCpuStatFieldNumber = 2,
    kCpuSirqFieldNumber = 3,
  };
  // string cpu_name = 1;
  void clear_cpu_name();
  const std::string& cpu_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu_name();
  PROTOBUF_NODISCARD std::string* release_cpu_name();
  void set_allocated_cpu_name(std::string* cpu_name);
  private:
  const std::string& _internal_cpu_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu_name(const std::string& value);
  std::string* _internal_mutable_cpu_name();
  public:

  // .Monitor.CpuStat cpu_stat = 2;
  bool has_cpu_stat() const;
  private:
  bool _internal_has_cpu_stat() const;
  public:
  void clear_cpu_stat();
  const ::Monitor::CpuStat& cpu_stat() const;
  PROTOBUF_NODISCARD ::Monitor::CpuStat* release_cpu_stat();
  ::Monitor::CpuStat* mutable_cpu_stat();
  void set_allocated_cpu_stat(::Monitor::CpuStat* cpu_stat);
  private:
  const ::Monitor::CpuStat& _internal_cpu_stat() const;
  ::Monitor::CpuStat* _internal_mutable_cpu_stat();
  public:
  void unsafe_arena_set_allocated_cpu_stat(
      ::Monitor::CpuStat* cpu_stat);
  ::Monitor::CpuStat* unsafe_arena_release_cpu_stat();

  // .Monitor.CpuSoftirq cpu_sirq = 3;
  bool has_cpu_sirq() const;
  private:
  bool _internal_has_cpu_sirq() const;
  public:
  void clear_cpu_sirq();
  const ::Monitor::CpuSoftirq& cpu_sirq() const;
  PROTOBUF_NODISCARD ::Monitor::CpuSoftirq* release_cpu_sirq();
  ::Monitor::CpuSoftirq* mutable_cpu_sirq();
  void set_allocated_cpu_sirq(::Monitor::CpuSoftirq* cpu_sirq);
  private:
  const ::Monitor::CpuSoftirq& _internal_cpu_sirq() const;
  ::Monitor::CpuSoftirq* _internal_mutable_cpu_sirq();
  public:
  void unsafe_arena_set_allocated_cpu_sirq(
      ::Monitor::CpuSoftirq* cpu_sirq);
  ::Monitor::CpuSoftirq* unsafe_arena_release_cpu_sirq();

  // @@protoc_insertion_point(class_scope:Monitor.CpuInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_name_;
    ::Monitor::CpuStat* cpu_stat_;
    ::Monitor::CpuSoftirq* cpu_sirq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class MonitorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Monitor.MonitorInfo) */ {
 public:
  inline MonitorInfo() : MonitorInfo(nullptr) {}
  ~MonitorInfo() override;
  explicit PROTOBUF_CONSTEXPR MonitorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorInfo(const MonitorInfo& from);
  MonitorInfo(MonitorInfo&& from) noexcept
    : MonitorInfo() {
    *this = ::std::move(from);
  }

  inline MonitorInfo& operator=(const MonitorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorInfo& operator=(MonitorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorInfo* internal_default_instance() {
    return reinterpret_cast<const MonitorInfo*>(
               &_MonitorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MonitorInfo& a, MonitorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonitorInfo& from) {
    MonitorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Monitor.MonitorInfo";
  }
  protected:
  explicit MonitorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetInfoFieldNumber = 3,
    kCpuInfoFieldNumber = 4,
    kMemInfoFieldNumber = 1,
    kCpuLoadFieldNumber = 2,
  };
  // repeated .Monitor.NetInfo net_info = 3;
  int net_info_size() const;
  private:
  int _internal_net_info_size() const;
  public:
  void clear_net_info();
  ::Monitor::NetInfo* mutable_net_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::NetInfo >*
      mutable_net_info();
  private:
  const ::Monitor::NetInfo& _internal_net_info(int index) const;
  ::Monitor::NetInfo* _internal_add_net_info();
  public:
  const ::Monitor::NetInfo& net_info(int index) const;
  ::Monitor::NetInfo* add_net_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::NetInfo >&
      net_info() const;

  // repeated .Monitor.CpuInfo cpu_info = 4;
  int cpu_info_size() const;
  private:
  int _internal_cpu_info_size() const;
  public:
  void clear_cpu_info();
  ::Monitor::CpuInfo* mutable_cpu_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::CpuInfo >*
      mutable_cpu_info();
  private:
  const ::Monitor::CpuInfo& _internal_cpu_info(int index) const;
  ::Monitor::CpuInfo* _internal_add_cpu_info();
  public:
  const ::Monitor::CpuInfo& cpu_info(int index) const;
  ::Monitor::CpuInfo* add_cpu_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::CpuInfo >&
      cpu_info() const;

  // .Monitor.MemInfo mem_info = 1;
  bool has_mem_info() const;
  private:
  bool _internal_has_mem_info() const;
  public:
  void clear_mem_info();
  const ::Monitor::MemInfo& mem_info() const;
  PROTOBUF_NODISCARD ::Monitor::MemInfo* release_mem_info();
  ::Monitor::MemInfo* mutable_mem_info();
  void set_allocated_mem_info(::Monitor::MemInfo* mem_info);
  private:
  const ::Monitor::MemInfo& _internal_mem_info() const;
  ::Monitor::MemInfo* _internal_mutable_mem_info();
  public:
  void unsafe_arena_set_allocated_mem_info(
      ::Monitor::MemInfo* mem_info);
  ::Monitor::MemInfo* unsafe_arena_release_mem_info();

  // .Monitor.CpuLoad cpu_load = 2;
  bool has_cpu_load() const;
  private:
  bool _internal_has_cpu_load() const;
  public:
  void clear_cpu_load();
  const ::Monitor::CpuLoad& cpu_load() const;
  PROTOBUF_NODISCARD ::Monitor::CpuLoad* release_cpu_load();
  ::Monitor::CpuLoad* mutable_cpu_load();
  void set_allocated_cpu_load(::Monitor::CpuLoad* cpu_load);
  private:
  const ::Monitor::CpuLoad& _internal_cpu_load() const;
  ::Monitor::CpuLoad* _internal_mutable_cpu_load();
  public:
  void unsafe_arena_set_allocated_cpu_load(
      ::Monitor::CpuLoad* cpu_load);
  ::Monitor::CpuLoad* unsafe_arena_release_cpu_load();

  // @@protoc_insertion_point(class_scope:Monitor.MonitorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::NetInfo > net_info_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::CpuInfo > cpu_info_;
    ::Monitor::MemInfo* mem_info_;
    ::Monitor::CpuLoad* cpu_load_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// ===================================================================

class RpcService_Stub;

class RpcService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RpcService() {};
 public:
  virtual ~RpcService();

  typedef RpcService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetMonitorInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                       ::Monitor::MonitorInfo* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService);
};

class RpcService_Stub : public RpcService {
 public:
  RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RpcService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RpcService ------------------------------------------

  void GetMonitorInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                       ::Monitor::MonitorInfo* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuInfo

// string cpu_name = 1;
inline void CpuInfo::clear_cpu_name() {
  _impl_.cpu_name_.ClearToEmpty();
}
inline const std::string& CpuInfo::cpu_name() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuInfo.cpu_name)
  return _internal_cpu_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CpuInfo::set_cpu_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cpu_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Monitor.CpuInfo.cpu_name)
}
inline std::string* CpuInfo::mutable_cpu_name() {
  std::string* _s = _internal_mutable_cpu_name();
  // @@protoc_insertion_point(field_mutable:Monitor.CpuInfo.cpu_name)
  return _s;
}
inline const std::string& CpuInfo::_internal_cpu_name() const {
  return _impl_.cpu_name_.Get();
}
inline void CpuInfo::_internal_set_cpu_name(const std::string& value) {
  
  _impl_.cpu_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CpuInfo::_internal_mutable_cpu_name() {
  
  return _impl_.cpu_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CpuInfo::release_cpu_name() {
  // @@protoc_insertion_point(field_release:Monitor.CpuInfo.cpu_name)
  return _impl_.cpu_name_.Release();
}
inline void CpuInfo::set_allocated_cpu_name(std::string* cpu_name) {
  if (cpu_name != nullptr) {
    
  } else {
    
  }
  _impl_.cpu_name_.SetAllocated(cpu_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpu_name_.IsDefault()) {
    _impl_.cpu_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Monitor.CpuInfo.cpu_name)
}

// .Monitor.CpuStat cpu_stat = 2;
inline bool CpuInfo::_internal_has_cpu_stat() const {
  return this != internal_default_instance() && _impl_.cpu_stat_ != nullptr;
}
inline bool CpuInfo::has_cpu_stat() const {
  return _internal_has_cpu_stat();
}
inline const ::Monitor::CpuStat& CpuInfo::_internal_cpu_stat() const {
  const ::Monitor::CpuStat* p = _impl_.cpu_stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Monitor::CpuStat&>(
      ::Monitor::_CpuStat_default_instance_);
}
inline const ::Monitor::CpuStat& CpuInfo::cpu_stat() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuInfo.cpu_stat)
  return _internal_cpu_stat();
}
inline void CpuInfo::unsafe_arena_set_allocated_cpu_stat(
    ::Monitor::CpuStat* cpu_stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpu_stat_);
  }
  _impl_.cpu_stat_ = cpu_stat;
  if (cpu_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Monitor.CpuInfo.cpu_stat)
}
inline ::Monitor::CpuStat* CpuInfo::release_cpu_stat() {
  
  ::Monitor::CpuStat* temp = _impl_.cpu_stat_;
  _impl_.cpu_stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Monitor::CpuStat* CpuInfo::unsafe_arena_release_cpu_stat() {
  // @@protoc_insertion_point(field_release:Monitor.CpuInfo.cpu_stat)
  
  ::Monitor::CpuStat* temp = _impl_.cpu_stat_;
  _impl_.cpu_stat_ = nullptr;
  return temp;
}
inline ::Monitor::CpuStat* CpuInfo::_internal_mutable_cpu_stat() {
  
  if (_impl_.cpu_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Monitor::CpuStat>(GetArenaForAllocation());
    _impl_.cpu_stat_ = p;
  }
  return _impl_.cpu_stat_;
}
inline ::Monitor::CpuStat* CpuInfo::mutable_cpu_stat() {
  ::Monitor::CpuStat* _msg = _internal_mutable_cpu_stat();
  // @@protoc_insertion_point(field_mutable:Monitor.CpuInfo.cpu_stat)
  return _msg;
}
inline void CpuInfo::set_allocated_cpu_stat(::Monitor::CpuStat* cpu_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpu_stat_);
  }
  if (cpu_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_stat));
    if (message_arena != submessage_arena) {
      cpu_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_stat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cpu_stat_ = cpu_stat;
  // @@protoc_insertion_point(field_set_allocated:Monitor.CpuInfo.cpu_stat)
}

// .Monitor.CpuSoftirq cpu_sirq = 3;
inline bool CpuInfo::_internal_has_cpu_sirq() const {
  return this != internal_default_instance() && _impl_.cpu_sirq_ != nullptr;
}
inline bool CpuInfo::has_cpu_sirq() const {
  return _internal_has_cpu_sirq();
}
inline const ::Monitor::CpuSoftirq& CpuInfo::_internal_cpu_sirq() const {
  const ::Monitor::CpuSoftirq* p = _impl_.cpu_sirq_;
  return p != nullptr ? *p : reinterpret_cast<const ::Monitor::CpuSoftirq&>(
      ::Monitor::_CpuSoftirq_default_instance_);
}
inline const ::Monitor::CpuSoftirq& CpuInfo::cpu_sirq() const {
  // @@protoc_insertion_point(field_get:Monitor.CpuInfo.cpu_sirq)
  return _internal_cpu_sirq();
}
inline void CpuInfo::unsafe_arena_set_allocated_cpu_sirq(
    ::Monitor::CpuSoftirq* cpu_sirq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpu_sirq_);
  }
  _impl_.cpu_sirq_ = cpu_sirq;
  if (cpu_sirq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Monitor.CpuInfo.cpu_sirq)
}
inline ::Monitor::CpuSoftirq* CpuInfo::release_cpu_sirq() {
  
  ::Monitor::CpuSoftirq* temp = _impl_.cpu_sirq_;
  _impl_.cpu_sirq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Monitor::CpuSoftirq* CpuInfo::unsafe_arena_release_cpu_sirq() {
  // @@protoc_insertion_point(field_release:Monitor.CpuInfo.cpu_sirq)
  
  ::Monitor::CpuSoftirq* temp = _impl_.cpu_sirq_;
  _impl_.cpu_sirq_ = nullptr;
  return temp;
}
inline ::Monitor::CpuSoftirq* CpuInfo::_internal_mutable_cpu_sirq() {
  
  if (_impl_.cpu_sirq_ == nullptr) {
    auto* p = CreateMaybeMessage<::Monitor::CpuSoftirq>(GetArenaForAllocation());
    _impl_.cpu_sirq_ = p;
  }
  return _impl_.cpu_sirq_;
}
inline ::Monitor::CpuSoftirq* CpuInfo::mutable_cpu_sirq() {
  ::Monitor::CpuSoftirq* _msg = _internal_mutable_cpu_sirq();
  // @@protoc_insertion_point(field_mutable:Monitor.CpuInfo.cpu_sirq)
  return _msg;
}
inline void CpuInfo::set_allocated_cpu_sirq(::Monitor::CpuSoftirq* cpu_sirq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpu_sirq_);
  }
  if (cpu_sirq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_sirq));
    if (message_arena != submessage_arena) {
      cpu_sirq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_sirq, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cpu_sirq_ = cpu_sirq;
  // @@protoc_insertion_point(field_set_allocated:Monitor.CpuInfo.cpu_sirq)
}

// -------------------------------------------------------------------

// MonitorInfo

// .Monitor.MemInfo mem_info = 1;
inline bool MonitorInfo::_internal_has_mem_info() const {
  return this != internal_default_instance() && _impl_.mem_info_ != nullptr;
}
inline bool MonitorInfo::has_mem_info() const {
  return _internal_has_mem_info();
}
inline const ::Monitor::MemInfo& MonitorInfo::_internal_mem_info() const {
  const ::Monitor::MemInfo* p = _impl_.mem_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Monitor::MemInfo&>(
      ::Monitor::_MemInfo_default_instance_);
}
inline const ::Monitor::MemInfo& MonitorInfo::mem_info() const {
  // @@protoc_insertion_point(field_get:Monitor.MonitorInfo.mem_info)
  return _internal_mem_info();
}
inline void MonitorInfo::unsafe_arena_set_allocated_mem_info(
    ::Monitor::MemInfo* mem_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mem_info_);
  }
  _impl_.mem_info_ = mem_info;
  if (mem_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Monitor.MonitorInfo.mem_info)
}
inline ::Monitor::MemInfo* MonitorInfo::release_mem_info() {
  
  ::Monitor::MemInfo* temp = _impl_.mem_info_;
  _impl_.mem_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Monitor::MemInfo* MonitorInfo::unsafe_arena_release_mem_info() {
  // @@protoc_insertion_point(field_release:Monitor.MonitorInfo.mem_info)
  
  ::Monitor::MemInfo* temp = _impl_.mem_info_;
  _impl_.mem_info_ = nullptr;
  return temp;
}
inline ::Monitor::MemInfo* MonitorInfo::_internal_mutable_mem_info() {
  
  if (_impl_.mem_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Monitor::MemInfo>(GetArenaForAllocation());
    _impl_.mem_info_ = p;
  }
  return _impl_.mem_info_;
}
inline ::Monitor::MemInfo* MonitorInfo::mutable_mem_info() {
  ::Monitor::MemInfo* _msg = _internal_mutable_mem_info();
  // @@protoc_insertion_point(field_mutable:Monitor.MonitorInfo.mem_info)
  return _msg;
}
inline void MonitorInfo::set_allocated_mem_info(::Monitor::MemInfo* mem_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mem_info_);
  }
  if (mem_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_info));
    if (message_arena != submessage_arena) {
      mem_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mem_info_ = mem_info;
  // @@protoc_insertion_point(field_set_allocated:Monitor.MonitorInfo.mem_info)
}

// .Monitor.CpuLoad cpu_load = 2;
inline bool MonitorInfo::_internal_has_cpu_load() const {
  return this != internal_default_instance() && _impl_.cpu_load_ != nullptr;
}
inline bool MonitorInfo::has_cpu_load() const {
  return _internal_has_cpu_load();
}
inline const ::Monitor::CpuLoad& MonitorInfo::_internal_cpu_load() const {
  const ::Monitor::CpuLoad* p = _impl_.cpu_load_;
  return p != nullptr ? *p : reinterpret_cast<const ::Monitor::CpuLoad&>(
      ::Monitor::_CpuLoad_default_instance_);
}
inline const ::Monitor::CpuLoad& MonitorInfo::cpu_load() const {
  // @@protoc_insertion_point(field_get:Monitor.MonitorInfo.cpu_load)
  return _internal_cpu_load();
}
inline void MonitorInfo::unsafe_arena_set_allocated_cpu_load(
    ::Monitor::CpuLoad* cpu_load) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpu_load_);
  }
  _impl_.cpu_load_ = cpu_load;
  if (cpu_load) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Monitor.MonitorInfo.cpu_load)
}
inline ::Monitor::CpuLoad* MonitorInfo::release_cpu_load() {
  
  ::Monitor::CpuLoad* temp = _impl_.cpu_load_;
  _impl_.cpu_load_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Monitor::CpuLoad* MonitorInfo::unsafe_arena_release_cpu_load() {
  // @@protoc_insertion_point(field_release:Monitor.MonitorInfo.cpu_load)
  
  ::Monitor::CpuLoad* temp = _impl_.cpu_load_;
  _impl_.cpu_load_ = nullptr;
  return temp;
}
inline ::Monitor::CpuLoad* MonitorInfo::_internal_mutable_cpu_load() {
  
  if (_impl_.cpu_load_ == nullptr) {
    auto* p = CreateMaybeMessage<::Monitor::CpuLoad>(GetArenaForAllocation());
    _impl_.cpu_load_ = p;
  }
  return _impl_.cpu_load_;
}
inline ::Monitor::CpuLoad* MonitorInfo::mutable_cpu_load() {
  ::Monitor::CpuLoad* _msg = _internal_mutable_cpu_load();
  // @@protoc_insertion_point(field_mutable:Monitor.MonitorInfo.cpu_load)
  return _msg;
}
inline void MonitorInfo::set_allocated_cpu_load(::Monitor::CpuLoad* cpu_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpu_load_);
  }
  if (cpu_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_load));
    if (message_arena != submessage_arena) {
      cpu_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_load, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cpu_load_ = cpu_load;
  // @@protoc_insertion_point(field_set_allocated:Monitor.MonitorInfo.cpu_load)
}

// repeated .Monitor.NetInfo net_info = 3;
inline int MonitorInfo::_internal_net_info_size() const {
  return _impl_.net_info_.size();
}
inline int MonitorInfo::net_info_size() const {
  return _internal_net_info_size();
}
inline ::Monitor::NetInfo* MonitorInfo::mutable_net_info(int index) {
  // @@protoc_insertion_point(field_mutable:Monitor.MonitorInfo.net_info)
  return _impl_.net_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::NetInfo >*
MonitorInfo::mutable_net_info() {
  // @@protoc_insertion_point(field_mutable_list:Monitor.MonitorInfo.net_info)
  return &_impl_.net_info_;
}
inline const ::Monitor::NetInfo& MonitorInfo::_internal_net_info(int index) const {
  return _impl_.net_info_.Get(index);
}
inline const ::Monitor::NetInfo& MonitorInfo::net_info(int index) const {
  // @@protoc_insertion_point(field_get:Monitor.MonitorInfo.net_info)
  return _internal_net_info(index);
}
inline ::Monitor::NetInfo* MonitorInfo::_internal_add_net_info() {
  return _impl_.net_info_.Add();
}
inline ::Monitor::NetInfo* MonitorInfo::add_net_info() {
  ::Monitor::NetInfo* _add = _internal_add_net_info();
  // @@protoc_insertion_point(field_add:Monitor.MonitorInfo.net_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::NetInfo >&
MonitorInfo::net_info() const {
  // @@protoc_insertion_point(field_list:Monitor.MonitorInfo.net_info)
  return _impl_.net_info_;
}

// repeated .Monitor.CpuInfo cpu_info = 4;
inline int MonitorInfo::_internal_cpu_info_size() const {
  return _impl_.cpu_info_.size();
}
inline int MonitorInfo::cpu_info_size() const {
  return _internal_cpu_info_size();
}
inline void MonitorInfo::clear_cpu_info() {
  _impl_.cpu_info_.Clear();
}
inline ::Monitor::CpuInfo* MonitorInfo::mutable_cpu_info(int index) {
  // @@protoc_insertion_point(field_mutable:Monitor.MonitorInfo.cpu_info)
  return _impl_.cpu_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::CpuInfo >*
MonitorInfo::mutable_cpu_info() {
  // @@protoc_insertion_point(field_mutable_list:Monitor.MonitorInfo.cpu_info)
  return &_impl_.cpu_info_;
}
inline const ::Monitor::CpuInfo& MonitorInfo::_internal_cpu_info(int index) const {
  return _impl_.cpu_info_.Get(index);
}
inline const ::Monitor::CpuInfo& MonitorInfo::cpu_info(int index) const {
  // @@protoc_insertion_point(field_get:Monitor.MonitorInfo.cpu_info)
  return _internal_cpu_info(index);
}
inline ::Monitor::CpuInfo* MonitorInfo::_internal_add_cpu_info() {
  return _impl_.cpu_info_.Add();
}
inline ::Monitor::CpuInfo* MonitorInfo::add_cpu_info() {
  ::Monitor::CpuInfo* _add = _internal_add_cpu_info();
  // @@protoc_insertion_point(field_add:Monitor.MonitorInfo.cpu_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Monitor::CpuInfo >&
MonitorInfo::cpu_info() const {
  // @@protoc_insertion_point(field_list:Monitor.MonitorInfo.cpu_info)
  return _impl_.cpu_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2eproto
